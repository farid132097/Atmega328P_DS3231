
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000fd6  0000106a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800128  00800128  00001092  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000091b  00000000  00000000  00001112  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002278  00000000  00000000  00001a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075d  00000000  00000000  00003ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000177b  00000000  00000000  00004402  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b0  00000000  00000000  00005b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000913  00000000  00000000  00006230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ed3  00000000  00000000  00006b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00007a16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 35       	cpi	r26, 0x58	; 88
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>
#include "debug.h"
#include "i2c.h"
#include "rtc.h"

int main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29

  DDRD  |= (1<<4);
  aa:	54 9a       	sbi	0x0a, 4	; 10
  PORTD &=~(1<<4);
  ac:	5c 98       	cbi	0x0b, 4	; 11
  
  RTC_Init();
  ae:	0e 94 b6 06 	call	0xd6c	; 0xd6c <RTC_Init>
  debug_init();
  b2:	0e 94 c2 05 	call	0xb84	; 0xb84 <debug_init>
  debug_tx_text_nl("Debug Started");
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 3b 04 	call	0x876	; 0x876 <debug_tx_text_nl>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	cc e2       	ldi	r28, 0x2C	; 44
  c0:	d1 e0       	ldi	r29, 0x01	; 1
  //arguments day,date,mon, year
  //RTC_Set_Date(3, 16, 1, 24);
  
  while(1){
    
    debug_tx_number_cm(RTC_Get_Year());
  c2:	0e 94 29 06 	call	0xc52	; 0xc52 <RTC_Get_Year>
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	bc 01       	movw	r22, r24
  ce:	cd 01       	movw	r24, r26
  d0:	0e 94 c2 04 	call	0x984	; 0x984 <debug_tx_number_cm>
	debug_tx_number_cm(RTC_Get_Month());
  d4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <RTC_Get_Month>
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	bc 01       	movw	r22, r24
  e0:	cd 01       	movw	r24, r26
  e2:	0e 94 c2 04 	call	0x984	; 0x984 <debug_tx_number_cm>
	debug_tx_number_cm(RTC_Get_Date());
  e6:	0e 94 46 06 	call	0xc8c	; 0xc8c <RTC_Get_Date>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	a0 e0       	ldi	r26, 0x00	; 0
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	bc 01       	movw	r22, r24
  f2:	cd 01       	movw	r24, r26
  f4:	0e 94 c2 04 	call	0x984	; 0x984 <debug_tx_number_cm>
	debug_tx_number_cm(RTC_Get_Day());
  f8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <RTC_Get_Day>
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	bc 01       	movw	r22, r24
 104:	cd 01       	movw	r24, r26
 106:	0e 94 c2 04 	call	0x984	; 0x984 <debug_tx_number_cm>
	debug_tx_number_cm(RTC_Get_Hr());
 10a:	0e 94 54 06 	call	0xca8	; 0xca8 <RTC_Get_Hr>
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	bc 01       	movw	r22, r24
 116:	cd 01       	movw	r24, r26
 118:	0e 94 c2 04 	call	0x984	; 0x984 <debug_tx_number_cm>
	debug_tx_number_cm(RTC_Get_Min());
 11c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <RTC_Get_Min>
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	a0 e0       	ldi	r26, 0x00	; 0
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	bc 01       	movw	r22, r24
 128:	cd 01       	movw	r24, r26
 12a:	0e 94 c2 04 	call	0x984	; 0x984 <debug_tx_number_cm>
	debug_tx_number_sp(RTC_Get_Sec());
 12e:	0e 94 9a 06 	call	0xd34	; 0xd34 <RTC_Get_Sec>
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	a0 e0       	ldi	r26, 0x00	; 0
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	bc 01       	movw	r22, r24
 13a:	cd 01       	movw	r24, r26
 13c:	0e 94 bd 04 	call	0x97a	; 0x97a <debug_tx_number_sp>

	if(RTC_Get_AmPm()){
 140:	0e 94 1b 06 	call	0xc36	; 0xc36 <RTC_Get_AmPm>
 144:	88 23       	and	r24, r24
 146:	19 f0       	breq	.+6      	; 0x14e <main+0xa8>
	  debug_tx_text_nl("PM");
 148:	8e e0       	ldi	r24, 0x0E	; 14
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	02 c0       	rjmp	.+4      	; 0x152 <main+0xac>
	}else{
	  debug_tx_text_nl("AM");
 14e:	81 e1       	ldi	r24, 0x11	; 17
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 3b 04 	call	0x876	; 0x876 <debug_tx_text_nl>
 156:	88 e8       	ldi	r24, 0x88	; 136
 158:	93 e1       	ldi	r25, 0x13	; 19
 15a:	fe 01       	movw	r30, r28
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0xb6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 160:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 162:	09 f4       	brne	.+2      	; 0x166 <main+0xc0>
 164:	ae cf       	rjmp	.-164    	; 0xc2 <main+0x1c>
 166:	f9 cf       	rjmp	.-14     	; 0x15a <main+0xb4>

00000168 <I2C_Struct_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
 168:	10 92 29 01 	sts	0x0129, r1
  I2C.ReadAddr=0x00;
 16c:	10 92 2a 01 	sts	0x012A, r1
}
 170:	08 95       	ret

00000172 <I2C_Half_Bit_Delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 172:	80 e5       	ldi	r24, 0x50	; 80
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <I2C_Half_Bit_Delay+0x2>

void I2C_Half_Bit_Delay(void){
  _delay_us(20);
}
 178:	08 95       	ret

0000017a <I2C_Bit_Delay>:
 17a:	80 ea       	ldi	r24, 0xA0	; 160
 17c:	8a 95       	dec	r24
 17e:	f1 f7       	brne	.-4      	; 0x17c <I2C_Bit_Delay+0x2>

void I2C_Bit_Delay(void){
  _delay_us(40);
}
 180:	08 95       	ret

00000182 <I2C_Guard_Delay>:
 182:	88 e0       	ldi	r24, 0x08	; 8
 184:	8a 95       	dec	r24
 186:	f1 f7       	brne	.-4      	; 0x184 <I2C_Guard_Delay+0x2>

void I2C_Guard_Delay(void){
  _delay_us(2);
}
 188:	08 95       	ret

0000018a <I2C_SCL_Set_DD>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	11 f4       	brne	.+4      	; 0x192 <I2C_SCL_Set_DD+0x8>
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
 18e:	3d 9a       	sbi	0x07, 5	; 7
 190:	08 95       	ret
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
 192:	3d 98       	cbi	0x07, 5	; 7
 194:	08 95       	ret

00000196 <I2C_SCL_Set_Output_LL>:
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	11 f4       	brne	.+4      	; 0x19e <I2C_SCL_Set_Output_LL+0x8>
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
 19a:	45 9a       	sbi	0x08, 5	; 8
 19c:	08 95       	ret
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
 19e:	45 98       	cbi	0x08, 5	; 8
 1a0:	08 95       	ret

000001a2 <I2C_SCL_Set_Output>:
  }
}

void I2C_SCL_Set_Output(uint8_t state){
  if(state==1){
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	19 f4       	brne	.+6      	; 0x1ac <I2C_SCL_Set_Output+0xa>
  }
}

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
 1a6:	45 9a       	sbi	0x08, 5	; 8

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
 1a8:	3d 98       	cbi	0x07, 5	; 7
 1aa:	08 95       	ret

void I2C_SCL_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SCL_PORT |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_PORT &=~ (1<<I2C_SCL_bp);
 1ac:	45 98       	cbi	0x08, 5	; 8
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
 1ae:	3d 9a       	sbi	0x07, 5	; 7
 1b0:	08 95       	ret

000001b2 <I2C_SCL_Get_State>:
	I2C_SCL_Set_DD(1);
  }
}

uint8_t I2C_SCL_Get_State(void){
  if(I2C_SCL_PIN & (1<<I2C_SCL_bp)){
 1b2:	86 b1       	in	r24, 0x06	; 6
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	25 e0       	ldi	r18, 0x05	; 5
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	2a 95       	dec	r18
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <I2C_SCL_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
 1c0:	81 70       	andi	r24, 0x01	; 1
 1c2:	08 95       	ret

000001c4 <I2C_SDA_Set_DD>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	11 f4       	brne	.+4      	; 0x1cc <I2C_SDA_Set_DD+0x8>
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
 1c8:	3c 9a       	sbi	0x07, 4	; 7
 1ca:	08 95       	ret
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 1cc:	3c 98       	cbi	0x07, 4	; 7
 1ce:	08 95       	ret

000001d0 <I2C_SDA_Set_Output_LL>:
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <I2C_SDA_Set_Output_LL+0x8>
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
 1d4:	44 9a       	sbi	0x08, 4	; 8
 1d6:	08 95       	ret
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
 1d8:	44 98       	cbi	0x08, 4	; 8
 1da:	08 95       	ret

000001dc <I2C_SDA_Set_Output>:
  }
}

void I2C_SDA_Set_Output(uint8_t state){
  if(state==1){
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	19 f4       	brne	.+6      	; 0x1e6 <I2C_SDA_Set_Output+0xa>
  }
}

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
 1e0:	44 9a       	sbi	0x08, 4	; 8

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 1e2:	3c 98       	cbi	0x07, 4	; 7
 1e4:	08 95       	ret

void I2C_SDA_Set_Output_LL(uint8_t state){
  if(state==1){
    I2C_SDA_PORT |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_PORT &=~ (1<<I2C_SDA_bp);
 1e6:	44 98       	cbi	0x08, 4	; 8
  }
}

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
 1e8:	3c 9a       	sbi	0x07, 4	; 7
 1ea:	08 95       	ret

000001ec <I2C_SDA_Get_State>:
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
 1ec:	86 b1       	in	r24, 0x06	; 6
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	34 e0       	ldi	r19, 0x04	; 4
 1f2:	96 95       	lsr	r25
 1f4:	87 95       	ror	r24
 1f6:	3a 95       	dec	r19
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <I2C_SDA_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
 1fa:	81 70       	andi	r24, 0x01	; 1
 1fc:	08 95       	ret

000001fe <I2C_SCL_Reset_State>:

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
  }else{
    I2C_SCL_DDR &=~ (1<<I2C_SCL_bp);
 1fe:	3d 98       	cbi	0x07, 5	; 7
  }
}

void I2C_SCL_Reset_State(void){
  I2C_SCL_Set_DD(0);
  I2C_SCL_Set_Output(0);
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
}
 206:	08 95       	ret

00000208 <I2C_SDA_Reset_State>:

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 208:	3c 98       	cbi	0x07, 4	; 7
  I2C_SCL_Set_Output(0);
}

void I2C_SDA_Reset_State(void){
  I2C_SDA_Set_DD(0);
  I2C_SDA_Set_Output(0);
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_SDA_Set_Output>
}
 210:	08 95       	ret

00000212 <I2C_GPIO_Init>:
  _delay_us(2);
}

void I2C_SCL_Set_DD(uint8_t state){
  if(state==1){
    I2C_SCL_DDR |=  (1<<I2C_SCL_bp);
 212:	3d 9a       	sbi	0x07, 5	; 7

void I2C_SDA_Set_DD(uint8_t state){
  if(state==1){
    I2C_SDA_DDR |=  (1<<I2C_SDA_bp);
  }else{
    I2C_SDA_DDR &=~ (1<<I2C_SDA_bp);
 214:	3c 98       	cbi	0x07, 4	; 7
}

void I2C_GPIO_Init(void){
  I2C_SCL_Set_DD(1);
  I2C_SDA_Set_DD(0);
  I2C_SCL_Set_Output(1);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_SDA_Set_Output>
}
 222:	08 95       	ret

00000224 <I2C_Start>:

void I2C_Start(void){
 224:	1f 93       	push	r17
  I2C_SCL_Set_Output(1);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(1);
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_SDA_Set_Output>
 232:	10 e5       	ldi	r17, 0x50	; 80
 234:	81 2f       	mov	r24, r17
 236:	8a 95       	dec	r24
 238:	f1 f7       	brne	.-4      	; 0x236 <I2C_Start+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(0);
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_SDA_Set_Output>
 240:	81 2f       	mov	r24, r17
 242:	8a 95       	dec	r24
 244:	f1 f7       	brne	.-4      	; 0x242 <I2C_Start+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(0);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
 24c:	1a 95       	dec	r17
 24e:	f1 f7       	brne	.-4      	; 0x24c <I2C_Start+0x28>
  I2C_Half_Bit_Delay();
}
 250:	1f 91       	pop	r17
 252:	08 95       	ret

00000254 <I2C_Stop>:

void I2C_Stop(void){
 254:	1f 93       	push	r17
  I2C_SCL_Set_Output(0);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
  I2C_SDA_Set_Output(0);
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_SDA_Set_Output>
 262:	10 e5       	ldi	r17, 0x50	; 80
 264:	81 2f       	mov	r24, r17
 266:	8a 95       	dec	r24
 268:	f1 f7       	brne	.-4      	; 0x266 <I2C_Stop+0x12>
  I2C_Half_Bit_Delay();
  
  I2C_SCL_Set_Output(1);
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
 270:	81 2f       	mov	r24, r17
 272:	8a 95       	dec	r24
 274:	f1 f7       	brne	.-4      	; 0x272 <I2C_Stop+0x1e>
  I2C_Half_Bit_Delay();
  
  I2C_SDA_Set_Output(1);
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_SDA_Set_Output>
 27c:	1a 95       	dec	r17
 27e:	f1 f7       	brne	.-4      	; 0x27c <I2C_Stop+0x28>
  I2C_Half_Bit_Delay();
}
 280:	1f 91       	pop	r17
 282:	08 95       	ret

00000284 <I2C_Data_Send>:

void I2C_Data_Send(uint8_t data){
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	08 2f       	mov	r16, r24
 28e:	10 e0       	ldi	r17, 0x00	; 0
 290:	50 e5       	ldi	r21, 0x50	; 80
 292:	f5 2e       	mov	r15, r21
  for(uint8_t i=0;i<8;i++){
    if( data & 0x80){
 294:	48 e0       	ldi	r20, 0x08	; 8
 296:	e4 2e       	mov	r14, r20
 298:	07 ff       	sbrs	r16, 7
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <I2C_Data_Send+0x1c>
	  I2C_SDA_Set_Output(1);
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <I2C_Data_Send+0x1e>
	}else{
	  I2C_SDA_Set_Output(0);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_SDA_Set_Output>
 2a6:	8f 2d       	mov	r24, r15
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <I2C_Data_Send+0x24>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
 2b2:	8f 2d       	mov	r24, r15
 2b4:	8a 95       	dec	r24
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <I2C_Data_Send+0x30>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
 2be:	8e 2d       	mov	r24, r14
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <I2C_Data_Send+0x3c>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
}

void I2C_Data_Send(uint8_t data){
  for(uint8_t i=0;i<8;i++){
 2c4:	1f 5f       	subi	r17, 0xFF	; 255
 2c6:	18 30       	cpi	r17, 0x08	; 8
 2c8:	11 f0       	breq	.+4      	; 0x2ce <I2C_Data_Send+0x4a>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
	I2C_Guard_Delay();
	data<<=1;
 2ca:	00 0f       	add	r16, r16
 2cc:	e5 cf       	rjmp	.-54     	; 0x298 <I2C_Data_Send+0x14>
  }
}
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	ff 90       	pop	r15
 2d4:	ef 90       	pop	r14
 2d6:	08 95       	ret

000002d8 <I2C_Data_Receive>:

uint8_t I2C_Data_Receive(void){
 2d8:	ff 92       	push	r15
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_SDA_Set_Output>
 2e4:	00 e0       	ldi	r16, 0x00	; 0
 2e6:	10 e0       	ldi	r17, 0x00	; 0
 2e8:	60 e5       	ldi	r22, 0x50	; 80
 2ea:	f6 2e       	mov	r15, r22
  for(uint8_t i=0;i<8;i++){
    data<<=1;
 2ec:	11 0f       	add	r17, r17
 2ee:	8f 2d       	mov	r24, r15
 2f0:	8a 95       	dec	r24
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <I2C_Data_Receive+0x18>
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
 2fa:	34 99       	sbic	0x06, 4	; 6
  for(uint8_t i=0;i<8;i++){
    data<<=1;
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(1);
	if(I2C_SDA_Get_State()){
	  data|=0x01;
 2fc:	11 60       	ori	r17, 0x01	; 1
 2fe:	8f 2d       	mov	r24, r15
 300:	8a 95       	dec	r24
 302:	f1 f7       	brne	.-4      	; 0x300 <I2C_Data_Receive+0x28>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
}

uint8_t I2C_Data_Receive(void){
  uint8_t data=0;
  I2C_SDA_Set_Output(1);
  for(uint8_t i=0;i<8;i++){
 30a:	0f 5f       	subi	r16, 0xFF	; 255
 30c:	08 30       	cpi	r16, 0x08	; 8
 30e:	71 f7       	brne	.-36     	; 0x2ec <I2C_Data_Receive+0x14>
 310:	80 e5       	ldi	r24, 0x50	; 80
 312:	8a 95       	dec	r24
 314:	f1 f7       	brne	.-4      	; 0x312 <I2C_Data_Receive+0x3a>
	}
	I2C_Half_Bit_Delay();
	I2C_SCL_Set_Output(0);
  }
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
  return data;
}
 31c:	81 2f       	mov	r24, r17
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	ff 90       	pop	r15
 324:	08 95       	ret

00000326 <I2C_Set_Ack>:

void I2C_Set_Ack(void){
 326:	1f 93       	push	r17
  I2C_SDA_Set_Output(0);
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_SDA_Set_Output>
 32e:	10 e5       	ldi	r17, 0x50	; 80
 330:	81 2f       	mov	r24, r17
 332:	8a 95       	dec	r24
 334:	f1 f7       	brne	.-4      	; 0x332 <I2C_Set_Ack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
 33c:	1a 95       	dec	r17
 33e:	f1 f7       	brne	.-4      	; 0x33c <I2C_Set_Ack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
}
 346:	1f 91       	pop	r17
 348:	08 95       	ret

0000034a <I2C_Set_Nack>:

void I2C_Set_Nack(void){
 34a:	1f 93       	push	r17
  I2C_SDA_Set_Output(1);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_SDA_Set_Output>
 352:	10 e5       	ldi	r17, 0x50	; 80
 354:	81 2f       	mov	r24, r17
 356:	8a 95       	dec	r24
 358:	f1 f7       	brne	.-4      	; 0x356 <I2C_Set_Nack+0xc>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
 360:	1a 95       	dec	r17
 362:	f1 f7       	brne	.-4      	; 0x360 <I2C_Set_Nack+0x16>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
}
 36a:	1f 91       	pop	r17
 36c:	08 95       	ret

0000036e <I2C_Get_Ack>:

uint8_t I2C_Get_Ack(void){
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
  uint8_t ack=0;
  I2C_SDA_Set_Output(1);
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 ee 00 	call	0x1dc	; 0x1dc <I2C_SDA_Set_Output>
 378:	00 e5       	ldi	r16, 0x50	; 80
 37a:	80 2f       	mov	r24, r16
 37c:	8a 95       	dec	r24
 37e:	f1 f7       	brne	.-4      	; 0x37c <I2C_Get_Ack+0xe>
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
	I2C_SDA_Set_DD(1);
  }
}

uint8_t I2C_SDA_Get_State(void){
  if(I2C_SDA_PIN & (1<<I2C_SDA_bp)){
 386:	16 b1       	in	r17, 0x06	; 6
 388:	0a 95       	dec	r16
 38a:	f1 f7       	brne	.-4      	; 0x388 <I2C_Get_Ack+0x1a>
  I2C_SDA_Set_Output(1);
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(1);
  ack=I2C_SDA_Get_State();
  I2C_Half_Bit_Delay();
  I2C_SCL_Set_Output(0);
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <I2C_SCL_Set_Output>
 392:	88 e0       	ldi	r24, 0x08	; 8
 394:	8a 95       	dec	r24
 396:	f1 f7       	brne	.-4      	; 0x394 <I2C_Get_Ack+0x26>
 398:	12 95       	swap	r17
 39a:	1f 70       	andi	r17, 0x0F	; 15
 39c:	10 95       	com	r17
  if(ack==0){
    return 1;
  }else{
    return 0;
  }
}
 39e:	81 2f       	mov	r24, r17
 3a0:	81 70       	andi	r24, 0x01	; 1
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	08 95       	ret

000003a8 <I2C_Send_Device_Address>:

uint8_t I2C_Send_Device_Address(uint8_t address){
 3a8:	1f 93       	push	r17
 3aa:	18 2f       	mov	r17, r24
  uint8_t ack=0;
  I2C_Start();
 3ac:	0e 94 12 01 	call	0x224	; 0x224 <I2C_Start>
  I2C_Data_Send(address);
 3b0:	81 2f       	mov	r24, r17
 3b2:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Data_Send>
  ack = I2C_Get_Ack();
 3b6:	0e 94 b7 01 	call	0x36e	; 0x36e <I2C_Get_Ack>
 3ba:	18 2f       	mov	r17, r24
  I2C_Stop();
 3bc:	0e 94 2a 01 	call	0x254	; 0x254 <I2C_Stop>
  return ack;
}
 3c0:	81 2f       	mov	r24, r17
 3c2:	1f 91       	pop	r17
 3c4:	08 95       	ret

000003c6 <I2C_Get_Device_Address>:

uint8_t I2C_Get_Device_Address(void){
 3c6:	1f 93       	push	r17
 3c8:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
	sts = I2C_Send_Device_Address(i);
 3ca:	81 2f       	mov	r24, r17
 3cc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <I2C_Send_Device_Address>
	if(sts==1){
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <I2C_Get_Device_Address+0x12>
 3d4:	81 2f       	mov	r24, r17
 3d6:	03 c0       	rjmp	.+6      	; 0x3de <I2C_Get_Device_Address+0x18>
  return ack;
}

uint8_t I2C_Get_Device_Address(void){
  uint8_t sts=0;
  for(uint8_t i=0;i<255;i++){
 3d8:	1f 5f       	subi	r17, 0xFF	; 255
 3da:	1f 3f       	cpi	r17, 0xFF	; 255
 3dc:	b1 f7       	brne	.-20     	; 0x3ca <I2C_Get_Device_Address+0x4>
	  sts=i;
	  break;
	}
  }
  return sts;
}
 3de:	1f 91       	pop	r17
 3e0:	08 95       	ret

000003e2 <I2C_Read_Register>:

uint8_t I2C_Read_Register(uint8_t reg){
 3e2:	df 92       	push	r13
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	18 2f       	mov	r17, r24
  uint8_t sts=0,data=0;
  I2C_Start();
 3ee:	0e 94 12 01 	call	0x224	; 0x224 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
 3f2:	80 91 29 01 	lds	r24, 0x0129
 3f6:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
 3fa:	0e 94 b7 01 	call	0x36e	; 0x36e <I2C_Get_Ack>
 3fe:	e8 2e       	mov	r14, r24
  I2C_Data_Send(reg);
 400:	81 2f       	mov	r24, r17
 402:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
 406:	0e 94 b7 01 	call	0x36e	; 0x36e <I2C_Get_Ack>
 40a:	f8 2e       	mov	r15, r24
  I2C_Stop();
 40c:	0e 94 2a 01 	call	0x254	; 0x254 <I2C_Stop>
  I2C_Start();
 410:	0e 94 12 01 	call	0x224	; 0x224 <I2C_Start>
  I2C_Data_Send(I2C.ReadAddr);
 414:	80 91 2a 01 	lds	r24, 0x012A
 418:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
 41c:	0e 94 b7 01 	call	0x36e	; 0x36e <I2C_Get_Ack>
 420:	18 2f       	mov	r17, r24
  data = I2C_Data_Receive();
 422:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <I2C_Data_Receive>
 426:	d8 2e       	mov	r13, r24
  sts |= I2C_Get_Ack()<<3;
 428:	0e 94 b7 01 	call	0x36e	; 0x36e <I2C_Get_Ack>
 42c:	08 2f       	mov	r16, r24
  I2C_Stop();
 42e:	0e 94 2a 01 	call	0x254	; 0x254 <I2C_Stop>
  if(sts == 0x07){
 432:	ff 0c       	add	r15, r15
 434:	11 0f       	add	r17, r17
 436:	11 0f       	add	r17, r17
 438:	1f 29       	or	r17, r15
 43a:	1e 29       	or	r17, r14
 43c:	00 0f       	add	r16, r16
 43e:	00 0f       	add	r16, r16
 440:	00 0f       	add	r16, r16
 442:	01 2b       	or	r16, r17
 444:	07 30       	cpi	r16, 0x07	; 7
 446:	11 f0       	breq	.+4      	; 0x44c <I2C_Read_Register+0x6a>
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	01 c0       	rjmp	.+2      	; 0x44e <I2C_Read_Register+0x6c>
 44c:	8d 2d       	mov	r24, r13
    sts = data;
  }else{
    sts = 0xFF;
  }
  return sts;
}
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	ff 90       	pop	r15
 454:	ef 90       	pop	r14
 456:	df 90       	pop	r13
 458:	08 95       	ret

0000045a <I2C_Write_Register>:

void I2C_Write_Register(uint8_t reg, uint8_t val){
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	18 2f       	mov	r17, r24
 460:	06 2f       	mov	r16, r22
  uint8_t sts=0,data=0;
  I2C_Start();
 462:	0e 94 12 01 	call	0x224	; 0x224 <I2C_Start>
  I2C_Data_Send(I2C.WriteAddr);
 466:	80 91 29 01 	lds	r24, 0x0129
 46a:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<0;
 46e:	0e 94 b7 01 	call	0x36e	; 0x36e <I2C_Get_Ack>
  I2C_Data_Send(reg);
 472:	81 2f       	mov	r24, r17
 474:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<1;
 478:	0e 94 b7 01 	call	0x36e	; 0x36e <I2C_Get_Ack>

  I2C_Data_Send(val);
 47c:	80 2f       	mov	r24, r16
 47e:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Data_Send>
  sts |= I2C_Get_Ack()<<2;
 482:	0e 94 b7 01 	call	0x36e	; 0x36e <I2C_Get_Ack>
  I2C_Stop();
 486:	0e 94 2a 01 	call	0x254	; 0x254 <I2C_Stop>
  if(sts == 0x07){
    sts = data;
  }else{
    sts = 0xFF;
  }
}
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	08 95       	ret

00000490 <I2C_Init>:
}i2c_t;

i2c_t I2C;

void I2C_Struct_Init(void){
  I2C.WriteAddr=0x00;
 490:	10 92 29 01 	sts	0x0129, r1
  I2C.ReadAddr=0x00;
 494:	10 92 2a 01 	sts	0x012A, r1
  }
}
 
void I2C_Init(void){
  I2C_Struct_Init();
  I2C_GPIO_Init();
 498:	0e 94 09 01 	call	0x212	; 0x212 <I2C_GPIO_Init>
 49c:	88 ee       	ldi	r24, 0xE8	; 232
 49e:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4a0:	2c e2       	ldi	r18, 0x2C	; 44
 4a2:	31 e0       	ldi	r19, 0x01	; 1
 4a4:	f9 01       	movw	r30, r18
 4a6:	31 97       	sbiw	r30, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <I2C_Init+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4ac:	d9 f7       	brne	.-10     	; 0x4a4 <I2C_Init+0x14>
  _delay_ms(100);
  I2C.WriteAddr = I2C_Get_Device_Address();
 4ae:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <I2C_Get_Device_Address>
 4b2:	80 93 29 01 	sts	0x0129, r24
  I2C.ReadAddr = I2C.WriteAddr+1;
 4b6:	8f 5f       	subi	r24, 0xFF	; 255
 4b8:	80 93 2a 01 	sts	0x012A, r24
}
 4bc:	08 95       	ret

000004be <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
 4be:	10 92 2b 01 	sts	0x012B, r1
  debug.datareg=0;
 4c2:	10 92 2c 01 	sts	0x012C, r1
  debug.databsy=1;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 2d 01 	sts	0x012D, r24
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
 4d0:	fc 01       	movw	r30, r24
 4d2:	e5 5d       	subi	r30, 0xD5	; 213
 4d4:	fe 4f       	sbci	r31, 0xFE	; 254
 4d6:	13 82       	std	Z+3, r1	; 0x03
 4d8:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
 4da:	80 32       	cpi	r24, 0x20	; 32
 4dc:	91 05       	cpc	r25, r1
 4de:	c1 f7       	brne	.-16     	; 0x4d0 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
 4e0:	10 92 4e 01 	sts	0x014E, r1
 4e4:	ef e4       	ldi	r30, 0x4F	; 79
 4e6:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
 4e8:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	e7 35       	cpi	r30, 0x57	; 87
 4ee:	f8 07       	cpc	r31, r24
 4f0:	d9 f7       	brne	.-10     	; 0x4e8 <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
 4f2:	10 82       	st	Z, r1
}
 4f4:	08 95       	ret

000004f6 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
 4f6:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
 4f8:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
 4fa:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
 502:	e8 e6       	ldi	r30, 0x68	; 104
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	82 60       	ori	r24, 0x02	; 2
 50a:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
 50c:	ec e6       	ldi	r30, 0x6C	; 108
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	80 64       	ori	r24, 0x40	; 64
 514:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
 516:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
 518:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
 51a:	08 95       	ret

0000051c <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
 520:	ee e6       	ldi	r30, 0x6E	; 110
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	10 82       	st	Z, r1
  TCNT0 =200;
 526:	88 ec       	ldi	r24, 0xC8	; 200
 528:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
 52a:	84 e0       	ldi	r24, 0x04	; 4
 52c:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
 532:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
 534:	08 95       	ret

00000536 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 536:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 53a:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 53c:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
 53e:	08 95       	ret

00000540 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
 540:	55 9a       	sbi	0x0a, 5	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 542:	5d 9a       	sbi	0x0b, 5	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
 544:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
 546:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
 548:	08 95       	ret

0000054a <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 54a:	5d 9a       	sbi	0x0b, 5	; 11
}
 54c:	08 95       	ret

0000054e <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 54e:	5d 98       	cbi	0x0b, 5	; 11
}
 550:	08 95       	ret

00000552 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	11 f4       	brne	.+4      	; 0x55a <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 556:	5d 9a       	sbi	0x0b, 5	; 11
 558:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 55a:	5d 98       	cbi	0x0b, 5	; 11
 55c:	08 95       	ret

0000055e <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 55e:	86 b1       	in	r24, 0x06	; 6
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	26 e0       	ldi	r18, 0x06	; 6
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	2a 95       	dec	r18
 56a:	e1 f7       	brne	.-8      	; 0x564 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
 56c:	81 70       	andi	r24, 0x01	; 1
 56e:	08 95       	ret

00000570 <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
 570:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 572:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
 578:	86 b5       	in	r24, 0x26	; 38
 57a:	82 33       	cpi	r24, 0x32	; 50
 57c:	e8 f3       	brcs	.-6      	; 0x578 <debug_delay+0x8>
    TCNT0=0;
 57e:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
 580:	86 b5       	in	r24, 0x26	; 38
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	82 17       	cp	r24, r18
 586:	93 07       	cpc	r25, r19
 588:	d8 f3       	brcs	.-10     	; 0x580 <debug_delay+0x10>
  TCCR0B=0;
 58a:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
 58c:	08 95       	ret

0000058e <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
 58e:	80 91 22 01 	lds	r24, 0x0122
 592:	90 91 23 01 	lds	r25, 0x0123
 596:	0e 94 b8 02 	call	0x570	; 0x570 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
 59a:	08 95       	ret

0000059c <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
 59c:	80 91 24 01 	lds	r24, 0x0124
 5a0:	90 91 25 01 	lds	r25, 0x0125
 5a4:	0e 94 b8 02 	call	0x570	; 0x570 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
 5a8:	08 95       	ret

000005aa <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
 5aa:	80 91 26 01 	lds	r24, 0x0126
 5ae:	90 91 27 01 	lds	r25, 0x0127
 5b2:	0e 94 b8 02 	call	0x570	; 0x570 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
 5b6:	08 95       	ret

000005b8 <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
 5b8:	df 92       	push	r13
 5ba:	ef 92       	push	r14
 5bc:	ff 92       	push	r15
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	df 93       	push	r29
 5c4:	cf 93       	push	r28
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
 5ca:	2a 97       	sbiw	r28, 0x0a	; 10
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
 5d6:	fe 01       	movw	r30, r28
 5d8:	31 96       	adiw	r30, 0x01	; 1
 5da:	9a e0       	ldi	r25, 0x0A	; 10
 5dc:	df 01       	movw	r26, r30
 5de:	1d 92       	st	X+, r1
 5e0:	9a 95       	dec	r25
 5e2:	e9 f7       	brne	.-6      	; 0x5de <debug_tx_byte+0x26>
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	9a 87       	std	Y+10, r25	; 0x0a
 5e8:	fe 01       	movw	r30, r28
 5ea:	32 96       	adiw	r30, 0x02	; 2
 5ec:	20 e0       	ldi	r18, 0x00	; 0
 5ee:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 5f0:	48 2f       	mov	r20, r24
 5f2:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
 5f4:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 5f6:	ca 01       	movw	r24, r20
 5f8:	02 2e       	mov	r0, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <debug_tx_byte+0x48>
 5fc:	95 95       	asr	r25
 5fe:	87 95       	ror	r24
 600:	0a 94       	dec	r0
 602:	e2 f7       	brpl	.-8      	; 0x5fc <debug_tx_byte+0x44>
 604:	80 ff       	sbrs	r24, 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <debug_tx_byte+0x54>
	  buf[i+1]=1;
 608:	60 83       	st	Z, r22
 60a:	01 c0       	rjmp	.+2      	; 0x60e <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
 60c:	10 82       	st	Z, r1
 60e:	2f 5f       	subi	r18, 0xFF	; 255
 610:	3f 4f       	sbci	r19, 0xFF	; 255
 612:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
 614:	28 30       	cpi	r18, 0x08	; 8
 616:	31 05       	cpc	r19, r1
 618:	71 f7       	brne	.-36     	; 0x5f6 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
 61a:	df b6       	in	r13, 0x3f	; 63
  cli();
 61c:	f8 94       	cli
 61e:	8e 01       	movw	r16, r28
 620:	0f 5f       	subi	r16, 0xFF	; 255
 622:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
 624:	3b e0       	ldi	r19, 0x0B	; 11
 626:	e3 2e       	mov	r14, r19
 628:	f1 2c       	mov	r15, r1
 62a:	ec 0e       	add	r14, r28
 62c:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 62e:	f8 01       	movw	r30, r16
 630:	80 81       	ld	r24, Z
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	11 f4       	brne	.+4      	; 0x63a <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 636:	5d 9a       	sbi	0x0b, 5	; 11
 638:	01 c0       	rjmp	.+2      	; 0x63c <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 63a:	5d 98       	cbi	0x0b, 5	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
 63c:	0e 94 c7 02 	call	0x58e	; 0x58e <debug_delay_index_0>
 640:	0f 5f       	subi	r16, 0xFF	; 255
 642:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
 644:	0e 15       	cp	r16, r14
 646:	1f 05       	cpc	r17, r15
 648:	91 f7       	brne	.-28     	; 0x62e <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
 64a:	df be       	out	0x3f, r13	; 63
}
 64c:	2a 96       	adiw	r28, 0x0a	; 10
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	f8 94       	cli
 652:	de bf       	out	0x3e, r29	; 62
 654:	0f be       	out	0x3f, r0	; 63
 656:	cd bf       	out	0x3d, r28	; 61
 658:	cf 91       	pop	r28
 65a:	df 91       	pop	r29
 65c:	1f 91       	pop	r17
 65e:	0f 91       	pop	r16
 660:	ff 90       	pop	r15
 662:	ef 90       	pop	r14
 664:	df 90       	pop	r13
 666:	08 95       	ret

00000668 <debug_rx_byte>:

uint8_t debug_rx_byte(void){
 668:	ff 92       	push	r15
 66a:	0f 93       	push	r16
 66c:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 66e:	36 9b       	sbis	0x06, 6	; 6
 670:	21 c0       	rjmp	.+66     	; 0x6b4 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
 672:	82 e0       	ldi	r24, 0x02	; 2
 674:	17 c0       	rjmp	.+46     	; 0x6a4 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
 676:	0e 94 ce 02 	call	0x59c	; 0x59c <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 67a:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
 67c:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
 67e:	17 30       	cpi	r17, 0x07	; 7
 680:	09 f0       	breq	.+2      	; 0x684 <debug_rx_byte+0x1c>
	    val>>=1;
 682:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
 684:	1f 5f       	subi	r17, 0xFF	; 255
 686:	18 30       	cpi	r17, 0x08	; 8
 688:	b1 f7       	brne	.-20     	; 0x676 <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
 68a:	0e 94 ce 02 	call	0x59c	; 0x59c <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 68e:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
 690:	f6 fc       	sbrc	r15, 6
 692:	07 c0       	rjmp	.+14     	; 0x6a2 <debug_rx_byte+0x3a>
 694:	86 ff       	sbrs	r24, 6
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <debug_rx_byte+0x3a>
	  debug.datareg=val;
 698:	00 93 2c 01 	sts	0x012C, r16
	  debug.error=0x00;
 69c:	10 92 2b 01 	sts	0x012B, r1
 6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	80 93 2b 01 	sts	0x012B, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
 6a8:	80 91 2c 01 	lds	r24, 0x012C
}
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	ff 90       	pop	r15
 6b2:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
 6b4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 6b8:	f6 b0       	in	r15, 0x06	; 6
 6ba:	00 e0       	ldi	r16, 0x00	; 0
 6bc:	10 e0       	ldi	r17, 0x00	; 0
 6be:	db cf       	rjmp	.-74     	; 0x676 <debug_rx_byte+0xe>

000006c0 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
 6c0:	80 91 2c 01 	lds	r24, 0x012C
}
 6c4:	08 95       	ret

000006c6 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
 6c6:	10 92 2c 01 	sts	0x012C, r1
}
 6ca:	08 95       	ret

000006cc <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
 6cc:	80 93 2c 01 	sts	0x012C, r24
}
 6d0:	08 95       	ret

000006d2 <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
 6d2:	bf 92       	push	r11
 6d4:	cf 92       	push	r12
 6d6:	df 92       	push	r13
 6d8:	ef 92       	push	r14
 6da:	ff 92       	push	r15
 6dc:	0f 93       	push	r16
 6de:	1f 93       	push	r17
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	7b 01       	movw	r14, r22
 6e6:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 6e8:	8f ef       	ldi	r24, 0xFF	; 255
 6ea:	e8 16       	cp	r14, r24
 6ec:	f1 04       	cpc	r15, r1
 6ee:	01 05       	cpc	r16, r1
 6f0:	11 05       	cpc	r17, r1
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <debug_tx_hex+0x24>
 6f4:	30 f4       	brcc	.+12     	; 0x702 <debug_tx_hex+0x30>
 6f6:	c8 e0       	ldi	r28, 0x08	; 8
 6f8:	d0 e0       	ldi	r29, 0x00	; 0
 6fa:	62 e0       	ldi	r22, 0x02	; 2
 6fc:	c6 2e       	mov	r12, r22
 6fe:	d1 2c       	mov	r13, r1
 700:	14 c0       	rjmp	.+40     	; 0x72a <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	e8 16       	cp	r14, r24
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	f8 06       	cpc	r15, r24
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	08 07       	cpc	r16, r24
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	18 07       	cpc	r17, r24
 712:	30 f0       	brcs	.+12     	; 0x720 <debug_tx_hex+0x4e>
 714:	c0 e2       	ldi	r28, 0x20	; 32
 716:	d0 e0       	ldi	r29, 0x00	; 0
 718:	58 e0       	ldi	r21, 0x08	; 8
 71a:	c5 2e       	mov	r12, r21
 71c:	d1 2c       	mov	r13, r1
 71e:	05 c0       	rjmp	.+10     	; 0x72a <debug_tx_hex+0x58>
 720:	c0 e1       	ldi	r28, 0x10	; 16
 722:	d0 e0       	ldi	r29, 0x00	; 0
 724:	44 e0       	ldi	r20, 0x04	; 4
 726:	c4 2e       	mov	r12, r20
 728:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
 72a:	80 e3       	ldi	r24, 0x30	; 48
 72c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
  debug_tx_byte('x');
 730:	88 e7       	ldi	r24, 0x78	; 120
 732:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
 736:	bb 24       	eor	r11, r11
 738:	17 c0       	rjmp	.+46     	; 0x768 <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 73a:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 73c:	d8 01       	movw	r26, r16
 73e:	c7 01       	movw	r24, r14
 740:	0c 2e       	mov	r0, r28
 742:	04 c0       	rjmp	.+8      	; 0x74c <debug_tx_hex+0x7a>
 744:	b6 95       	lsr	r27
 746:	a7 95       	ror	r26
 748:	97 95       	ror	r25
 74a:	87 95       	ror	r24
 74c:	0a 94       	dec	r0
 74e:	d2 f7       	brpl	.-12     	; 0x744 <debug_tx_hex+0x72>
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	8f 70       	andi	r24, 0x0F	; 15
 754:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 756:	8a 30       	cpi	r24, 0x0A	; 10
 758:	91 05       	cpc	r25, r1
 75a:	10 f0       	brcs	.+4      	; 0x760 <debug_tx_hex+0x8e>
	    hex_digit+=55;
 75c:	c7 96       	adiw	r24, 0x37	; 55
 75e:	01 c0       	rjmp	.+2      	; 0x762 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
 760:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
 762:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 766:	b3 94       	inc	r11
 768:	8b 2d       	mov	r24, r11
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	8c 15       	cp	r24, r12
 76e:	9d 05       	cpc	r25, r13
 770:	20 f3       	brcs	.-56     	; 0x73a <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	1f 91       	pop	r17
 778:	0f 91       	pop	r16
 77a:	ff 90       	pop	r15
 77c:	ef 90       	pop	r14
 77e:	df 90       	pop	r13
 780:	cf 90       	pop	r12
 782:	bf 90       	pop	r11
 784:	08 95       	ret

00000786 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
 786:	af 92       	push	r10
 788:	bf 92       	push	r11
 78a:	cf 92       	push	r12
 78c:	df 92       	push	r13
 78e:	ef 92       	push	r14
 790:	ff 92       	push	r15
 792:	0f 93       	push	r16
 794:	1f 93       	push	r17
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	7b 01       	movw	r14, r22
 79c:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 79e:	6f 3f       	cpi	r22, 0xFF	; 255
 7a0:	71 05       	cpc	r23, r1
 7a2:	81 05       	cpc	r24, r1
 7a4:	91 05       	cpc	r25, r1
 7a6:	09 f0       	breq	.+2      	; 0x7aa <debug_tx_bin+0x24>
 7a8:	18 f4       	brcc	.+6      	; 0x7b0 <debug_tx_bin+0x2a>
 7aa:	f7 e0       	ldi	r31, 0x07	; 7
 7ac:	df 2e       	mov	r13, r31
 7ae:	0d c0       	rjmp	.+26     	; 0x7ca <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 7b0:	60 30       	cpi	r22, 0x00	; 0
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	73 07       	cpc	r23, r19
 7b6:	31 e0       	ldi	r19, 0x01	; 1
 7b8:	83 07       	cpc	r24, r19
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	93 07       	cpc	r25, r19
 7be:	18 f0       	brcs	.+6      	; 0x7c6 <debug_tx_bin+0x40>
 7c0:	ef e1       	ldi	r30, 0x1F	; 31
 7c2:	de 2e       	mov	r13, r30
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <debug_tx_bin+0x44>
 7c6:	7f e0       	ldi	r23, 0x0F	; 15
 7c8:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
 7ca:	80 e3       	ldi	r24, 0x30	; 48
 7cc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
  debug_tx_byte('b');
 7d0:	82 e6       	ldi	r24, 0x62	; 98
 7d2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
 7d6:	c0 e0       	ldi	r28, 0x00	; 0
 7d8:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
 7da:	cd 2c       	mov	r12, r13
 7dc:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 7de:	56 01       	movw	r10, r12
 7e0:	08 94       	sec
 7e2:	a1 1c       	adc	r10, r1
 7e4:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
 7e6:	c6 01       	movw	r24, r12
 7e8:	8c 1b       	sub	r24, r28
 7ea:	9d 0b       	sbc	r25, r29
 7ec:	a8 01       	movw	r20, r16
 7ee:	97 01       	movw	r18, r14
 7f0:	04 c0       	rjmp	.+8      	; 0x7fa <debug_tx_bin+0x74>
 7f2:	56 95       	lsr	r21
 7f4:	47 95       	ror	r20
 7f6:	37 95       	ror	r19
 7f8:	27 95       	ror	r18
 7fa:	8a 95       	dec	r24
 7fc:	d2 f7       	brpl	.-12     	; 0x7f2 <debug_tx_bin+0x6c>
 7fe:	da 01       	movw	r26, r20
 800:	c9 01       	movw	r24, r18
 802:	81 70       	andi	r24, 0x01	; 1
 804:	90 70       	andi	r25, 0x00	; 0
 806:	89 2b       	or	r24, r25
 808:	11 f0       	breq	.+4      	; 0x80e <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
 80a:	81 e3       	ldi	r24, 0x31	; 49
 80c:	01 c0       	rjmp	.+2      	; 0x810 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
 80e:	80 e3       	ldi	r24, 0x30	; 48
 810:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
 814:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 816:	ca 15       	cp	r28, r10
 818:	db 05       	cpc	r29, r11
 81a:	29 f7       	brne	.-54     	; 0x7e6 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	1f 91       	pop	r17
 822:	0f 91       	pop	r16
 824:	ff 90       	pop	r15
 826:	ef 90       	pop	r14
 828:	df 90       	pop	r13
 82a:	cf 90       	pop	r12
 82c:	bf 90       	pop	r11
 82e:	af 90       	pop	r10
 830:	08 95       	ret

00000832 <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
 832:	8d e0       	ldi	r24, 0x0D	; 13
 834:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
  debug_tx_byte('\n');
 838:	8a e0       	ldi	r24, 0x0A	; 10
 83a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
}
 83e:	08 95       	ret

00000840 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
 840:	80 e2       	ldi	r24, 0x20	; 32
 842:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
}
 846:	08 95       	ret

00000848 <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
 848:	8c e2       	ldi	r24, 0x2C	; 44
 84a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
}
 84e:	08 95       	ret

00000850 <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
 850:	1f 93       	push	r17
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	ec 01       	movw	r28, r24
 858:	10 e0       	ldi	r17, 0x00	; 0
 85a:	03 c0       	rjmp	.+6      	; 0x862 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
 85c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
        i++;
 860:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 862:	fe 01       	movw	r30, r28
 864:	e1 0f       	add	r30, r17
 866:	f1 1d       	adc	r31, r1
 868:	80 81       	ld	r24, Z
 86a:	88 23       	and	r24, r24
 86c:	b9 f7       	brne	.-18     	; 0x85c <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
 86e:	df 91       	pop	r29
 870:	cf 91       	pop	r28
 872:	1f 91       	pop	r17
 874:	08 95       	ret

00000876 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
 876:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
  debug_tx_nl();
 87a:	0e 94 19 04 	call	0x832	; 0x832 <debug_tx_nl>
}
 87e:	08 95       	ret

00000880 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
 880:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
  debug_tx_sp();
 884:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
}
 888:	08 95       	ret

0000088a <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
 88a:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
  debug_tx_cm();
 88e:	0e 94 24 04 	call	0x848	; 0x848 <debug_tx_cm>
}
 892:	08 95       	ret

00000894 <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
 894:	bf 92       	push	r11
 896:	cf 92       	push	r12
 898:	df 92       	push	r13
 89a:	ef 92       	push	r14
 89c:	ff 92       	push	r15
 89e:	0f 93       	push	r16
 8a0:	1f 93       	push	r17
 8a2:	6b 01       	movw	r12, r22
 8a4:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 8a6:	61 15       	cp	r22, r1
 8a8:	71 05       	cpc	r23, r1
 8aa:	81 05       	cpc	r24, r1
 8ac:	91 05       	cpc	r25, r1
 8ae:	31 f4       	brne	.+12     	; 0x8bc <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
 8b0:	10 92 4f 01 	sts	0x014F, r1
    debug.input_num_digits=1;
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	80 93 57 01 	sts	0x0157, r24
 8ba:	23 c0       	rjmp	.+70     	; 0x902 <__stack+0x3>
 8bc:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
 8be:	0b 2d       	mov	r16, r11
 8c0:	10 e0       	ldi	r17, 0x00	; 0
 8c2:	05 5d       	subi	r16, 0xD5	; 213
 8c4:	1e 4f       	sbci	r17, 0xFE	; 254
 8c6:	c7 01       	movw	r24, r14
 8c8:	b6 01       	movw	r22, r12
 8ca:	2a e0       	ldi	r18, 0x0A	; 10
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	40 e0       	ldi	r20, 0x00	; 0
 8d0:	50 e0       	ldi	r21, 0x00	; 0
 8d2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__udivmodsi4>
 8d6:	f8 01       	movw	r30, r16
 8d8:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
 8da:	c7 01       	movw	r24, r14
 8dc:	b6 01       	movw	r22, r12
 8de:	2a e0       	ldi	r18, 0x0A	; 10
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	40 e0       	ldi	r20, 0x00	; 0
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__udivmodsi4>
 8ea:	c9 01       	movw	r24, r18
 8ec:	da 01       	movw	r26, r20
 8ee:	6c 01       	movw	r12, r24
 8f0:	7d 01       	movw	r14, r26
      i++;
 8f2:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
 8f4:	c1 14       	cp	r12, r1
 8f6:	d1 04       	cpc	r13, r1
 8f8:	e1 04       	cpc	r14, r1
 8fa:	f1 04       	cpc	r15, r1
 8fc:	01 f7       	brne	.-64     	; 0x8be <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
 8fe:	b0 92 57 01 	sts	0x0157, r11
  }
}
 902:	1f 91       	pop	r17
 904:	0f 91       	pop	r16
 906:	ff 90       	pop	r15
 908:	ef 90       	pop	r14
 90a:	df 90       	pop	r13
 90c:	cf 90       	pop	r12
 90e:	bf 90       	pop	r11
 910:	08 95       	ret

00000912 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
 912:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 914:	10 91 57 01 	lds	r17, 0x0157
 918:	09 c0       	rjmp	.+18     	; 0x92c <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
 91a:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
 91c:	e1 2f       	mov	r30, r17
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	e5 5d       	subi	r30, 0xD5	; 213
 922:	fe 4f       	sbci	r31, 0xFE	; 254
 924:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
 926:	80 5d       	subi	r24, 0xD0	; 208
 928:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 92c:	11 23       	and	r17, r17
 92e:	a9 f7       	brne	.-22     	; 0x91a <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
 930:	1f 91       	pop	r17
 932:	08 95       	ret

00000934 <debug_tx_number>:

void debug_tx_number(int32_t num){
 934:	ef 92       	push	r14
 936:	ff 92       	push	r15
 938:	0f 93       	push	r16
 93a:	1f 93       	push	r17
 93c:	7b 01       	movw	r14, r22
 93e:	8c 01       	movw	r16, r24
  if(num<0){
 940:	97 ff       	sbrs	r25, 7
 942:	0b c0       	rjmp	.+22     	; 0x95a <debug_tx_number+0x26>
    debug_tx_byte('-');
 944:	8d e2       	ldi	r24, 0x2D	; 45
 946:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <debug_tx_byte>
	num=-num;
 94a:	10 95       	com	r17
 94c:	00 95       	com	r16
 94e:	f0 94       	com	r15
 950:	e0 94       	com	r14
 952:	e1 1c       	adc	r14, r1
 954:	f1 1c       	adc	r15, r1
 956:	01 1d       	adc	r16, r1
 958:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
 95a:	c8 01       	movw	r24, r16
 95c:	b7 01       	movw	r22, r14
 95e:	0e 94 4a 04 	call	0x894	; 0x894 <debug_determine_digit_numbers>
  debug_tx_number_digits();
 962:	0e 94 89 04 	call	0x912	; 0x912 <debug_tx_number_digits>
}
 966:	1f 91       	pop	r17
 968:	0f 91       	pop	r16
 96a:	ff 90       	pop	r15
 96c:	ef 90       	pop	r14
 96e:	08 95       	ret

00000970 <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
 970:	0e 94 9a 04 	call	0x934	; 0x934 <debug_tx_number>
  debug_tx_nl();
 974:	0e 94 19 04 	call	0x832	; 0x832 <debug_tx_nl>
}
 978:	08 95       	ret

0000097a <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
 97a:	0e 94 9a 04 	call	0x934	; 0x934 <debug_tx_number>
  debug_tx_sp();
 97e:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
}
 982:	08 95       	ret

00000984 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
 984:	0e 94 9a 04 	call	0x934	; 0x934 <debug_tx_number>
  debug_tx_text(",");
 988:	84 e1       	ldi	r24, 0x14	; 20
 98a:	91 e0       	ldi	r25, 0x01	; 1
 98c:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
}
 990:	08 95       	ret

00000992 <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
 992:	0e 94 69 03 	call	0x6d2	; 0x6d2 <debug_tx_hex>
  debug_tx_nl();
 996:	0e 94 19 04 	call	0x832	; 0x832 <debug_tx_nl>
}
 99a:	08 95       	ret

0000099c <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
 99c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <debug_tx_hex>
  debug_tx_sp();
 9a0:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
}
 9a4:	08 95       	ret

000009a6 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
 9a6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <debug_tx_hex>
  debug_tx_text(",");
 9aa:	84 e1       	ldi	r24, 0x14	; 20
 9ac:	91 e0       	ldi	r25, 0x01	; 1
 9ae:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
}
 9b2:	08 95       	ret

000009b4 <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
 9b4:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_bin>
  debug_tx_nl();
 9b8:	0e 94 19 04 	call	0x832	; 0x832 <debug_tx_nl>
}
 9bc:	08 95       	ret

000009be <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
 9be:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_bin>
  debug_tx_sp();
 9c2:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
}
 9c6:	08 95       	ret

000009c8 <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
 9c8:	0e 94 c3 03 	call	0x786	; 0x786 <debug_tx_bin>
  debug_tx_text(",");
 9cc:	84 e1       	ldi	r24, 0x14	; 20
 9ce:	91 e0       	ldi	r25, 0x01	; 1
 9d0:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
}
 9d4:	08 95       	ret

000009d6 <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
 9d6:	ef 92       	push	r14
 9d8:	ff 92       	push	r15
 9da:	0f 93       	push	r16
 9dc:	1f 93       	push	r17
 9de:	7a 01       	movw	r14, r20
 9e0:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 9e2:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
  debug_tx_sp();
 9e6:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
  debug_tx_number_nl(num);
 9ea:	c8 01       	movw	r24, r16
 9ec:	b7 01       	movw	r22, r14
 9ee:	0e 94 b8 04 	call	0x970	; 0x970 <debug_tx_number_nl>
}
 9f2:	1f 91       	pop	r17
 9f4:	0f 91       	pop	r16
 9f6:	ff 90       	pop	r15
 9f8:	ef 90       	pop	r14
 9fa:	08 95       	ret

000009fc <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
 9fc:	ef 92       	push	r14
 9fe:	ff 92       	push	r15
 a00:	0f 93       	push	r16
 a02:	1f 93       	push	r17
 a04:	7a 01       	movw	r14, r20
 a06:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 a08:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
  debug_tx_sp();
 a0c:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
  debug_tx_number_sp(num);
 a10:	c8 01       	movw	r24, r16
 a12:	b7 01       	movw	r22, r14
 a14:	0e 94 bd 04 	call	0x97a	; 0x97a <debug_tx_number_sp>
}
 a18:	1f 91       	pop	r17
 a1a:	0f 91       	pop	r16
 a1c:	ff 90       	pop	r15
 a1e:	ef 90       	pop	r14
 a20:	08 95       	ret

00000a22 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
 a22:	ef 92       	push	r14
 a24:	ff 92       	push	r15
 a26:	0f 93       	push	r16
 a28:	1f 93       	push	r17
 a2a:	7a 01       	movw	r14, r20
 a2c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 a2e:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
  debug_tx_sp();
 a32:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
  debug_tx_number_cm(num);
 a36:	c8 01       	movw	r24, r16
 a38:	b7 01       	movw	r22, r14
 a3a:	0e 94 c2 04 	call	0x984	; 0x984 <debug_tx_number_cm>
}
 a3e:	1f 91       	pop	r17
 a40:	0f 91       	pop	r16
 a42:	ff 90       	pop	r15
 a44:	ef 90       	pop	r14
 a46:	08 95       	ret

00000a48 <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
 a48:	ef 92       	push	r14
 a4a:	ff 92       	push	r15
 a4c:	0f 93       	push	r16
 a4e:	1f 93       	push	r17
 a50:	7a 01       	movw	r14, r20
 a52:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 a54:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
  debug_tx_sp();
 a58:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
 a5c:	c8 01       	movw	r24, r16
 a5e:	b7 01       	movw	r22, r14
 a60:	0e 94 c9 04 	call	0x992	; 0x992 <debug_tx_number_hex_nl>
}
 a64:	1f 91       	pop	r17
 a66:	0f 91       	pop	r16
 a68:	ff 90       	pop	r15
 a6a:	ef 90       	pop	r14
 a6c:	08 95       	ret

00000a6e <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
 a6e:	ef 92       	push	r14
 a70:	ff 92       	push	r15
 a72:	0f 93       	push	r16
 a74:	1f 93       	push	r17
 a76:	7a 01       	movw	r14, r20
 a78:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 a7a:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
  debug_tx_sp();
 a7e:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
 a82:	c8 01       	movw	r24, r16
 a84:	b7 01       	movw	r22, r14
 a86:	0e 94 ce 04 	call	0x99c	; 0x99c <debug_tx_number_hex_sp>
}
 a8a:	1f 91       	pop	r17
 a8c:	0f 91       	pop	r16
 a8e:	ff 90       	pop	r15
 a90:	ef 90       	pop	r14
 a92:	08 95       	ret

00000a94 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
 a94:	ef 92       	push	r14
 a96:	ff 92       	push	r15
 a98:	0f 93       	push	r16
 a9a:	1f 93       	push	r17
 a9c:	7a 01       	movw	r14, r20
 a9e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 aa0:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
  debug_tx_sp();
 aa4:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
 aa8:	c8 01       	movw	r24, r16
 aaa:	b7 01       	movw	r22, r14
 aac:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <debug_tx_number_hex_cm>
}
 ab0:	1f 91       	pop	r17
 ab2:	0f 91       	pop	r16
 ab4:	ff 90       	pop	r15
 ab6:	ef 90       	pop	r14
 ab8:	08 95       	ret

00000aba <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
 aba:	ef 92       	push	r14
 abc:	ff 92       	push	r15
 abe:	0f 93       	push	r16
 ac0:	1f 93       	push	r17
 ac2:	7a 01       	movw	r14, r20
 ac4:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 ac6:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
  debug_tx_sp();
 aca:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
  debug_tx_number_bin_nl(num);
 ace:	c8 01       	movw	r24, r16
 ad0:	b7 01       	movw	r22, r14
 ad2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <debug_tx_number_bin_nl>
}
 ad6:	1f 91       	pop	r17
 ad8:	0f 91       	pop	r16
 ada:	ff 90       	pop	r15
 adc:	ef 90       	pop	r14
 ade:	08 95       	ret

00000ae0 <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
 ae0:	ef 92       	push	r14
 ae2:	ff 92       	push	r15
 ae4:	0f 93       	push	r16
 ae6:	1f 93       	push	r17
 ae8:	7a 01       	movw	r14, r20
 aea:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 aec:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
  debug_tx_sp();
 af0:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
  debug_tx_number_bin_sp(num);
 af4:	c8 01       	movw	r24, r16
 af6:	b7 01       	movw	r22, r14
 af8:	0e 94 df 04 	call	0x9be	; 0x9be <debug_tx_number_bin_sp>
}
 afc:	1f 91       	pop	r17
 afe:	0f 91       	pop	r16
 b00:	ff 90       	pop	r15
 b02:	ef 90       	pop	r14
 b04:	08 95       	ret

00000b06 <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
 b06:	ef 92       	push	r14
 b08:	ff 92       	push	r15
 b0a:	0f 93       	push	r16
 b0c:	1f 93       	push	r17
 b0e:	7a 01       	movw	r14, r20
 b10:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 b12:	0e 94 28 04 	call	0x850	; 0x850 <debug_tx_text>
  debug_tx_sp();
 b16:	0e 94 20 04 	call	0x840	; 0x840 <debug_tx_sp>
  debug_tx_number_bin_cm(num);
 b1a:	c8 01       	movw	r24, r16
 b1c:	b7 01       	movw	r22, r14
 b1e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <debug_tx_number_bin_cm>
}
 b22:	1f 91       	pop	r17
 b24:	0f 91       	pop	r16
 b26:	ff 90       	pop	r15
 b28:	ef 90       	pop	r14
 b2a:	08 95       	ret

00000b2c <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
 b2c:	eb e2       	ldi	r30, 0x2B	; 43
 b2e:	f1 e0       	ldi	r31, 0x01	; 1
 b30:	e8 0f       	add	r30, r24
 b32:	f1 1d       	adc	r31, r1
 b34:	83 81       	ldd	r24, Z+3	; 0x03
}
 b36:	08 95       	ret

00000b38 <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 b38:	80 91 4e 01 	lds	r24, 0x014E
}
 b3c:	08 95       	ret

00000b3e <debug_flush_buf>:

void debug_flush_buf(void){
 b3e:	80 e0       	ldi	r24, 0x00	; 0
 b40:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
 b42:	fc 01       	movw	r30, r24
 b44:	e5 5d       	subi	r30, 0xD5	; 213
 b46:	fe 4f       	sbci	r31, 0xFE	; 254
 b48:	13 82       	std	Z+3, r1	; 0x03
 b4a:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
 b4c:	80 32       	cpi	r24, 0x20	; 32
 b4e:	91 05       	cpc	r25, r1
 b50:	c1 f7       	brne	.-16     	; 0xb42 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
 b52:	10 92 4e 01 	sts	0x014E, r1
}
 b56:	08 95       	ret

00000b58 <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
 b58:	80 91 2d 01 	lds	r24, 0x012D
}
 b5c:	08 95       	ret

00000b5e <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
 b5e:	80 91 2d 01 	lds	r24, 0x012D
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
 b62:	88 23       	and	r24, r24
 b64:	11 f0       	breq	.+4      	; 0xb6a <debug_data_available_rx_buf+0xc>
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	08 c0       	rjmp	.+16     	; 0xb7a <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 b6a:	80 91 4e 01 	lds	r24, 0x014E
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	88 23       	and	r24, r24
 b72:	09 f4       	brne	.+2      	; 0xb76 <debug_data_available_rx_buf+0x18>
 b74:	91 e0       	ldi	r25, 0x01	; 1
 b76:	81 e0       	ldi	r24, 0x01	; 1
 b78:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
 b7a:	89 2f       	mov	r24, r25
 b7c:	08 95       	ret

00000b7e <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 b7e:	80 91 4e 01 	lds	r24, 0x014E
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
 b82:	08 95       	ret

00000b84 <debug_init>:

void debug_init(void){
  debug_struct_init();
 b84:	0e 94 5f 02 	call	0x4be	; 0x4be <debug_struct_init>
  debug_timings_init();
 b88:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <debug_timings_init>
  debug_gpio_init();
 b8c:	0e 94 a0 02 	call	0x540	; 0x540 <debug_gpio_init>
}
 b90:	08 95       	ret

00000b92 <__vector_4>:


ISR(ISR_PCINT_VECT){
 b92:	1f 92       	push	r1
 b94:	0f 92       	push	r0
 b96:	0f b6       	in	r0, 0x3f	; 63
 b98:	0f 92       	push	r0
 b9a:	11 24       	eor	r1, r1
 b9c:	2f 93       	push	r18
 b9e:	3f 93       	push	r19
 ba0:	4f 93       	push	r20
 ba2:	5f 93       	push	r21
 ba4:	6f 93       	push	r22
 ba6:	7f 93       	push	r23
 ba8:	8f 93       	push	r24
 baa:	9f 93       	push	r25
 bac:	af 93       	push	r26
 bae:	bf 93       	push	r27
 bb0:	ef 93       	push	r30
 bb2:	ff 93       	push	r31
  debug.databsy=1;
 bb4:	81 e0       	ldi	r24, 0x01	; 1
 bb6:	80 93 2d 01 	sts	0x012D, r24
  uint8_t val=debug_rx_byte();
 bba:	0e 94 34 03 	call	0x668	; 0x668 <debug_rx_byte>
 bbe:	98 2f       	mov	r25, r24
  if(debug.error==0){
 bc0:	80 91 2b 01 	lds	r24, 0x012B
 bc4:	88 23       	and	r24, r24
 bc6:	99 f4       	brne	.+38     	; 0xbee <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
 bc8:	e0 91 4e 01 	lds	r30, 0x014E
 bcc:	f0 e0       	ldi	r31, 0x00	; 0
 bce:	e5 5d       	subi	r30, 0xD5	; 213
 bd0:	fe 4f       	sbci	r31, 0xFE	; 254
 bd2:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
 bd4:	80 91 4e 01 	lds	r24, 0x014E
 bd8:	8f 5f       	subi	r24, 0xFF	; 255
 bda:	80 93 4e 01 	sts	0x014E, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
 bde:	80 91 4e 01 	lds	r24, 0x014E
 be2:	81 32       	cpi	r24, 0x21	; 33
 be4:	10 f0       	brcs	.+4      	; 0xbea <__vector_4+0x58>
	  debug.bufindex=0;
 be6:	10 92 4e 01 	sts	0x014E, r1
	}
    debug_timer_start();
 bea:	0e 94 8e 02 	call	0x51c	; 0x51c <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
 bee:	ff 91       	pop	r31
 bf0:	ef 91       	pop	r30
 bf2:	bf 91       	pop	r27
 bf4:	af 91       	pop	r26
 bf6:	9f 91       	pop	r25
 bf8:	8f 91       	pop	r24
 bfa:	7f 91       	pop	r23
 bfc:	6f 91       	pop	r22
 bfe:	5f 91       	pop	r21
 c00:	4f 91       	pop	r20
 c02:	3f 91       	pop	r19
 c04:	2f 91       	pop	r18
 c06:	0f 90       	pop	r0
 c08:	0f be       	out	0x3f, r0	; 63
 c0a:	0f 90       	pop	r0
 c0c:	1f 90       	pop	r1
 c0e:	18 95       	reti

00000c10 <__vector_16>:

ISR(TIMER_OVF_VECT){
 c10:	1f 92       	push	r1
 c12:	0f 92       	push	r0
 c14:	0f b6       	in	r0, 0x3f	; 63
 c16:	0f 92       	push	r0
 c18:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 c1a:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 c1e:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 c20:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
 c22:	10 92 2d 01 	sts	0x012D, r1
}
 c26:	0f 90       	pop	r0
 c28:	0f be       	out	0x3f, r0	; 63
 c2a:	0f 90       	pop	r0
 c2c:	1f 90       	pop	r1
 c2e:	18 95       	reti

00000c30 <RTC_Get_Error>:
  uint8_t error=0;
  #ifdef ENABLE_ERROR_HANDLER
  error=RTC_Error;
  #endif
  return error;
 c30:	80 91 28 01 	lds	r24, 0x0128
 c34:	08 95       	ret

00000c36 <RTC_Get_AmPm>:
}
  

  
uint8_t RTC_Get_AmPm(void){  //0:AM, 1:PM
  uint8_t tmp0=I2C_Read_Register(0x02);
 c36:	82 e0       	ldi	r24, 0x02	; 2
 c38:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2C_Read_Register>
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	25 e0       	ldi	r18, 0x05	; 5
 c40:	96 95       	lsr	r25
 c42:	87 95       	ror	r24
 c44:	2a 95       	dec	r18
 c46:	e1 f7       	brne	.-8      	; 0xc40 <RTC_Get_AmPm+0xa>
  if(tmp0 & (1<<5)){
    return 1;
  }else{
    return 0;
  }
}
 c48:	81 70       	andi	r24, 0x01	; 1
 c4a:	08 95       	ret

00000c4c <RTC_Read>:


//edit below functions for compatibility with other devices//

uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
 c4c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2C_Read_Register>
}
 c50:	08 95       	ret

00000c52 <RTC_Get_Year>:


//edit below functions for compatibility with other devices//

uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
 c52:	86 e0       	ldi	r24, 0x06	; 6
 c54:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2C_Read_Register>

uint8_t RTC_Get_Year(void){
  uint8_t tmp0=0, year=0, error=0;
  tmp0=RTC_Read(0x06);
  year = ((tmp0 & 0xF0)>>4);
  year*= 10;
 c58:	28 2f       	mov	r18, r24
 c5a:	22 95       	swap	r18
 c5c:	2f 70       	andi	r18, 0x0F	; 15
 c5e:	9a e0       	ldi	r25, 0x0A	; 10
 c60:	29 9f       	mul	r18, r25
 c62:	20 2d       	mov	r18, r0
 c64:	11 24       	eor	r1, r1
  year+= (tmp0 & 0x0F);
 c66:	8f 70       	andi	r24, 0x0F	; 15
 c68:	28 0f       	add	r18, r24
  if(year>99){
 c6a:	24 36       	cpi	r18, 0x64	; 100
 c6c:	18 f0       	brcs	.+6      	; 0xc74 <RTC_Get_Year+0x22>
 c6e:	20 e0       	ldi	r18, 0x00	; 0
 c70:	87 e1       	ldi	r24, 0x17	; 23
 c72:	01 c0       	rjmp	.+2      	; 0xc76 <RTC_Get_Year+0x24>
 c74:	80 e0       	ldi	r24, 0x00	; 0
    error=0x17;
	year=0;
  }
  
  #ifdef ENABLE_ERROR_HANDLER
  RTC_Error=error;
 c76:	80 93 28 01 	sts	0x0128, r24
  #endif
  
  return year;
}
 c7a:	82 2f       	mov	r24, r18
 c7c:	08 95       	ret

00000c7e <RTC_Get_Month>:


//edit below functions for compatibility with other devices//

uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
 c7e:	85 e0       	ldi	r24, 0x05	; 5
 c80:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2C_Read_Register>
    error=0x16;
	mon=0;
  }
  
  #ifdef ENABLE_ERROR_HANDLER
  RTC_Error=error;
 c84:	10 92 28 01 	sts	0x0128, r1
  #endif
  
  return mon;
}
 c88:	8f 70       	andi	r24, 0x0F	; 15
 c8a:	08 95       	ret

00000c8c <RTC_Get_Date>:


//edit below functions for compatibility with other devices//

uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
 c8c:	84 e0       	ldi	r24, 0x04	; 4
 c8e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2C_Read_Register>
    error=0x15;
	date=0;
  }
  
  #ifdef ENABLE_ERROR_HANDLER
  RTC_Error=error;
 c92:	10 92 28 01 	sts	0x0128, r1
  #endif
  
  return date;
}
 c96:	8f 70       	andi	r24, 0x0F	; 15
 c98:	08 95       	ret

00000c9a <RTC_Get_Day>:


//edit below functions for compatibility with other devices//

uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
 c9a:	83 e0       	ldi	r24, 0x03	; 3
 c9c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2C_Read_Register>
    error=0x14;
	day=0;
  }
  
  #ifdef ENABLE_ERROR_HANDLER
  RTC_Error=error;
 ca0:	10 92 28 01 	sts	0x0128, r1
  #endif
  
  return day;
}
 ca4:	87 70       	andi	r24, 0x07	; 7
 ca6:	08 95       	ret

00000ca8 <RTC_Get_Hr>:


//edit below functions for compatibility with other devices//

uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
 ca8:	82 e0       	ldi	r24, 0x02	; 2
 caa:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2C_Read_Register>


uint8_t RTC_Get_Hr(void){
  uint8_t tmp0=0, hr=0, error=0;
  tmp0=RTC_Read(0x02);
  if(tmp0 & (1<<6)){           //12H
 cae:	28 2f       	mov	r18, r24
 cb0:	30 e0       	ldi	r19, 0x00	; 0
 cb2:	98 2f       	mov	r25, r24
 cb4:	9f 70       	andi	r25, 0x0F	; 15
 cb6:	86 ff       	sbrs	r24, 6
 cb8:	11 c0       	rjmp	.+34     	; 0xcdc <RTC_Get_Hr+0x34>
    hr = ((tmp0 & (1<<4))>>4);
	hr*= 10;
 cba:	20 71       	andi	r18, 0x10	; 16
 cbc:	30 70       	andi	r19, 0x00	; 0
 cbe:	54 e0       	ldi	r21, 0x04	; 4
 cc0:	35 95       	asr	r19
 cc2:	27 95       	ror	r18
 cc4:	5a 95       	dec	r21
 cc6:	e1 f7       	brne	.-8      	; 0xcc0 <RTC_Get_Hr+0x18>
 cc8:	8a e0       	ldi	r24, 0x0A	; 10
 cca:	82 9f       	mul	r24, r18
 ccc:	80 2d       	mov	r24, r0
 cce:	11 24       	eor	r1, r1
	hr+= (tmp0 & 0x0F);
 cd0:	89 0f       	add	r24, r25
  }else{                       //24H
    hr = (tmp0 & 0x30)>>4;
    hr*= 10;
	hr+= (tmp0 & 0x0F);
  }
  if((tmp0 & 0x40) && (hr>12)){
 cd2:	8d 30       	cpi	r24, 0x0D	; 13
 cd4:	78 f0       	brcs	.+30     	; 0xcf4 <RTC_Get_Hr+0x4c>
 cd6:	80 e0       	ldi	r24, 0x00	; 0
 cd8:	93 e1       	ldi	r25, 0x13	; 19
 cda:	0d c0       	rjmp	.+26     	; 0xcf6 <RTC_Get_Hr+0x4e>
    hr = ((tmp0 & (1<<4))>>4);
	hr*= 10;
	hr+= (tmp0 & 0x0F);
  }else{                       //24H
    hr = (tmp0 & 0x30)>>4;
    hr*= 10;
 cdc:	20 73       	andi	r18, 0x30	; 48
 cde:	30 70       	andi	r19, 0x00	; 0
 ce0:	44 e0       	ldi	r20, 0x04	; 4
 ce2:	35 95       	asr	r19
 ce4:	27 95       	ror	r18
 ce6:	4a 95       	dec	r20
 ce8:	e1 f7       	brne	.-8      	; 0xce2 <RTC_Get_Hr+0x3a>
 cea:	8a e0       	ldi	r24, 0x0A	; 10
 cec:	82 9f       	mul	r24, r18
 cee:	80 2d       	mov	r24, r0
 cf0:	11 24       	eor	r1, r1
	hr+= (tmp0 & 0x0F);
 cf2:	89 0f       	add	r24, r25
 cf4:	90 e0       	ldi	r25, 0x00	; 0
    error=0x13;
	hr=0;
  }
  
  #ifdef ENABLE_ERROR_HANDLER
  RTC_Error=error;
 cf6:	90 93 28 01 	sts	0x0128, r25
  #endif
  
  return hr;
}
 cfa:	08 95       	ret

00000cfc <RTC_Get_Min>:


//edit below functions for compatibility with other devices//

uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
 cfc:	81 e0       	ldi	r24, 0x01	; 1
 cfe:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2C_Read_Register>

uint8_t RTC_Get_Min(void){
  uint8_t tmp0=0, min=0, error=0;
  tmp0=RTC_Read(0x01);
  min = ((tmp0 & 0x70)>>4);
  min*= 10;
 d02:	28 2f       	mov	r18, r24
 d04:	30 e0       	ldi	r19, 0x00	; 0
 d06:	20 77       	andi	r18, 0x70	; 112
 d08:	30 70       	andi	r19, 0x00	; 0
 d0a:	64 e0       	ldi	r22, 0x04	; 4
 d0c:	35 95       	asr	r19
 d0e:	27 95       	ror	r18
 d10:	6a 95       	dec	r22
 d12:	e1 f7       	brne	.-8      	; 0xd0c <RTC_Get_Min+0x10>
 d14:	9a e0       	ldi	r25, 0x0A	; 10
 d16:	92 9f       	mul	r25, r18
 d18:	90 2d       	mov	r25, r0
 d1a:	11 24       	eor	r1, r1
  min+= (tmp0 & 0x0F);
 d1c:	8f 70       	andi	r24, 0x0F	; 15
 d1e:	98 0f       	add	r25, r24
  if(min>59){
 d20:	9c 33       	cpi	r25, 0x3C	; 60
 d22:	18 f0       	brcs	.+6      	; 0xd2a <RTC_Get_Min+0x2e>
 d24:	90 e0       	ldi	r25, 0x00	; 0
 d26:	82 e1       	ldi	r24, 0x12	; 18
 d28:	01 c0       	rjmp	.+2      	; 0xd2c <RTC_Get_Min+0x30>
 d2a:	80 e0       	ldi	r24, 0x00	; 0
    error=0x12;
	min=0;
  }
  
  #ifdef ENABLE_ERROR_HANDLER
  RTC_Error=error;
 d2c:	80 93 28 01 	sts	0x0128, r24
  #endif
  
  return min;
}
 d30:	89 2f       	mov	r24, r25
 d32:	08 95       	ret

00000d34 <RTC_Get_Sec>:


//edit below functions for compatibility with other devices//

uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
 d34:	80 e0       	ldi	r24, 0x00	; 0
 d36:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2C_Read_Register>

uint8_t RTC_Get_Sec(void){
  uint8_t tmp0=0, sec=0, error=0;
  tmp0=RTC_Read(0x00);
  sec = ((tmp0 & 0x70)>>4);
  sec*= 10;
 d3a:	28 2f       	mov	r18, r24
 d3c:	30 e0       	ldi	r19, 0x00	; 0
 d3e:	20 77       	andi	r18, 0x70	; 112
 d40:	30 70       	andi	r19, 0x00	; 0
 d42:	74 e0       	ldi	r23, 0x04	; 4
 d44:	35 95       	asr	r19
 d46:	27 95       	ror	r18
 d48:	7a 95       	dec	r23
 d4a:	e1 f7       	brne	.-8      	; 0xd44 <RTC_Get_Sec+0x10>
 d4c:	9a e0       	ldi	r25, 0x0A	; 10
 d4e:	92 9f       	mul	r25, r18
 d50:	90 2d       	mov	r25, r0
 d52:	11 24       	eor	r1, r1
  sec+= (tmp0 & 0x0F);
 d54:	8f 70       	andi	r24, 0x0F	; 15
 d56:	98 0f       	add	r25, r24
  if(sec>59){
 d58:	9c 33       	cpi	r25, 0x3C	; 60
 d5a:	18 f0       	brcs	.+6      	; 0xd62 <RTC_Get_Sec+0x2e>
 d5c:	90 e0       	ldi	r25, 0x00	; 0
 d5e:	81 e1       	ldi	r24, 0x11	; 17
 d60:	01 c0       	rjmp	.+2      	; 0xd64 <RTC_Get_Sec+0x30>
 d62:	80 e0       	ldi	r24, 0x00	; 0
    error=0x11;
	sec=0;
  }
  
  #ifdef ENABLE_ERROR_HANDLER
  RTC_Error=error;
 d64:	80 93 28 01 	sts	0x0128, r24
  #endif
  
  return sec;
}
 d68:	89 2f       	mov	r24, r25
 d6a:	08 95       	ret

00000d6c <RTC_Init>:




void RTC_Init(void){
  I2C_Init();  
 d6c:	0e 94 48 02 	call	0x490	; 0x490 <I2C_Init>
}
 d70:	08 95       	ret

00000d72 <RTC_Write>:
uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
}

void RTC_Write(uint8_t addr, uint8_t data){
  I2C_Write_Register(addr,data);
 d72:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
}
 d76:	08 95       	ret

00000d78 <RTC_Set_Date>:
  }
  RTC_Set_Time( hr, min, sec);
}


void RTC_Set_Date(uint8_t day, uint8_t date, uint8_t mon, uint16_t year){
 d78:	ff 92       	push	r15
 d7a:	0f 93       	push	r16
 d7c:	1f 93       	push	r17
 d7e:	98 2f       	mov	r25, r24
 d80:	56 2f       	mov	r21, r22
  uint8_t tmp0=0,tmp1=0, error=0;
  uint8_t day_reg=0, date_reg=0, mon_reg=0, year_reg=0;
  
  //write day
  if((day>=1) && (day<=7)){
 d82:	81 50       	subi	r24, 0x01	; 1
 d84:	87 30       	cpi	r24, 0x07	; 7
 d86:	18 f0       	brcs	.+6      	; 0xd8e <RTC_Set_Date+0x16>
 d88:	04 e0       	ldi	r16, 0x04	; 4
 d8a:	ff 24       	eor	r15, r15
 d8c:	02 c0       	rjmp	.+4      	; 0xd92 <RTC_Set_Date+0x1a>
 d8e:	f9 2e       	mov	r15, r25
 d90:	00 e0       	ldi	r16, 0x00	; 0
  }
  
  
  //write mon
  tmp0 = date/10;
  tmp1 = date%10;
 d92:	85 2f       	mov	r24, r21
 d94:	6a e0       	ldi	r22, 0x0A	; 10
 d96:	0e 94 bb 07 	call	0xf76	; 0xf76 <__udivmodqi4>
 d9a:	e9 2f       	mov	r30, r25
  tmp1+= (tmp0*10);
 d9c:	85 2f       	mov	r24, r21
 d9e:	0e 94 bb 07 	call	0xf76	; 0xf76 <__udivmodqi4>
 da2:	9a e0       	ldi	r25, 0x0A	; 10
 da4:	89 9f       	mul	r24, r25
 da6:	c0 01       	movw	r24, r0
 da8:	11 24       	eor	r1, r1
 daa:	e8 0f       	add	r30, r24
  if( ((mon==1)||(mon==3)||(mon==5)||(mon==7)||(mon==8)||(mon==10)||(mon==12)) && ((date>=1) && (date<=31)) ){
 dac:	41 30       	cpi	r20, 0x01	; 1
 dae:	61 f0       	breq	.+24     	; 0xdc8 <RTC_Set_Date+0x50>
 db0:	43 30       	cpi	r20, 0x03	; 3
 db2:	51 f0       	breq	.+20     	; 0xdc8 <RTC_Set_Date+0x50>
 db4:	45 30       	cpi	r20, 0x05	; 5
 db6:	41 f0       	breq	.+16     	; 0xdc8 <RTC_Set_Date+0x50>
 db8:	47 30       	cpi	r20, 0x07	; 7
 dba:	31 f0       	breq	.+12     	; 0xdc8 <RTC_Set_Date+0x50>
 dbc:	48 30       	cpi	r20, 0x08	; 8
 dbe:	21 f0       	breq	.+8      	; 0xdc8 <RTC_Set_Date+0x50>
 dc0:	4a 30       	cpi	r20, 0x0A	; 10
 dc2:	11 f0       	breq	.+4      	; 0xdc8 <RTC_Set_Date+0x50>
 dc4:	4c 30       	cpi	r20, 0x0C	; 12
 dc6:	21 f4       	brne	.+8      	; 0xdd0 <RTC_Set_Date+0x58>
 dc8:	85 2f       	mov	r24, r21
 dca:	81 50       	subi	r24, 0x01	; 1
 dcc:	8f 31       	cpi	r24, 0x1F	; 31
 dce:	d0 f0       	brcs	.+52     	; 0xe04 <RTC_Set_Date+0x8c>
    date_reg=tmp1;
  }
  else if( ((mon==4)||(mon==6)||(mon==9)||(mon==11)) && ((date>=1) && (date<=30)) ){
 dd0:	44 30       	cpi	r20, 0x04	; 4
 dd2:	31 f0       	breq	.+12     	; 0xde0 <RTC_Set_Date+0x68>
 dd4:	46 30       	cpi	r20, 0x06	; 6
 dd6:	21 f0       	breq	.+8      	; 0xde0 <RTC_Set_Date+0x68>
 dd8:	49 30       	cpi	r20, 0x09	; 9
 dda:	11 f0       	breq	.+4      	; 0xde0 <RTC_Set_Date+0x68>
 ddc:	4b 30       	cpi	r20, 0x0B	; 11
 dde:	21 f4       	brne	.+8      	; 0xde8 <RTC_Set_Date+0x70>
 de0:	85 2f       	mov	r24, r21
 de2:	81 50       	subi	r24, 0x01	; 1
 de4:	8e 31       	cpi	r24, 0x1E	; 30
 de6:	70 f0       	brcs	.+28     	; 0xe04 <RTC_Set_Date+0x8c>
    date_reg=tmp1;
  }
  else if( mon==2 ){
 de8:	42 30       	cpi	r20, 0x02	; 2
 dea:	71 f4       	brne	.+28     	; 0xe08 <RTC_Set_Date+0x90>
    if(year%4==0){                  //leap year
 dec:	c9 01       	movw	r24, r18
 dee:	83 70       	andi	r24, 0x03	; 3
 df0:	90 70       	andi	r25, 0x00	; 0
 df2:	65 2f       	mov	r22, r21
 df4:	61 50       	subi	r22, 0x01	; 1
 df6:	89 2b       	or	r24, r25
 df8:	19 f4       	brne	.+6      	; 0xe00 <RTC_Set_Date+0x88>
      if((date>=1) && (date<=29)){
 dfa:	6d 31       	cpi	r22, 0x1D	; 29
 dfc:	18 f0       	brcs	.+6      	; 0xe04 <RTC_Set_Date+0x8c>
 dfe:	04 c0       	rjmp	.+8      	; 0xe08 <RTC_Set_Date+0x90>
        date_reg=tmp1;
	  }else{
	    error=0x05;
	  }
    }else{
      if((date>=1) && (date<=28)){
 e00:	6c 31       	cpi	r22, 0x1C	; 28
 e02:	10 f4       	brcc	.+4      	; 0xe08 <RTC_Set_Date+0x90>
 e04:	1e 2f       	mov	r17, r30
 e06:	02 c0       	rjmp	.+4      	; 0xe0c <RTC_Set_Date+0x94>
 e08:	05 e0       	ldi	r16, 0x05	; 5
 e0a:	10 e0       	ldi	r17, 0x00	; 0
    error=0x05;
  }
  
  
  //write year
  if(year<=9999){
 e0c:	20 51       	subi	r18, 0x10	; 16
 e0e:	37 42       	sbci	r19, 0x27	; 39
 e10:	10 f0       	brcs	.+4      	; 0xe16 <RTC_Set_Date+0x9e>
 e12:	06 e0       	ldi	r16, 0x06	; 6
 e14:	16 c0       	rjmp	.+44     	; 0xe42 <RTC_Set_Date+0xca>
uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
}

void RTC_Write(uint8_t addr, uint8_t data){
  I2C_Write_Register(addr,data);
 e16:	85 e0       	ldi	r24, 0x05	; 5
 e18:	6e 2f       	mov	r22, r30
 e1a:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
  }else{
    error=0x06;
  }
  
  
  if(error==0){
 e1e:	00 23       	and	r16, r16
 e20:	81 f4       	brne	.+32     	; 0xe42 <RTC_Set_Date+0xca>
uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
}

void RTC_Write(uint8_t addr, uint8_t data){
  I2C_Write_Register(addr,data);
 e22:	86 e0       	ldi	r24, 0x06	; 6
 e24:	60 e0       	ldi	r22, 0x00	; 0
 e26:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
	RTC_Write(0x04,date_reg);
    RTC_Write(0x03,day_reg);
  }
  
  #ifdef ENABLE_ERROR_HANDLER
  RTC_Error=error;
 e2a:	85 e0       	ldi	r24, 0x05	; 5
 e2c:	60 e0       	ldi	r22, 0x00	; 0
 e2e:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
 e32:	84 e0       	ldi	r24, 0x04	; 4
 e34:	61 2f       	mov	r22, r17
 e36:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
 e3a:	83 e0       	ldi	r24, 0x03	; 3
 e3c:	6f 2d       	mov	r22, r15
 e3e:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
 e42:	00 93 28 01 	sts	0x0128, r16
  #endif
  
}
 e46:	1f 91       	pop	r17
 e48:	0f 91       	pop	r16
 e4a:	ff 90       	pop	r15
 e4c:	08 95       	ret

00000e4e <RTC_Set_Time>:
void RTC_Set_12H_PM(void){
  RTC_Write(0x02,0b01100000);
}


void RTC_Set_Time(uint8_t hr, uint8_t min, uint8_t sec){
 e4e:	ef 92       	push	r14
 e50:	ff 92       	push	r15
 e52:	0f 93       	push	r16
 e54:	1f 93       	push	r17
 e56:	08 2f       	mov	r16, r24
 e58:	56 2f       	mov	r21, r22
  uint8_t hr_reg=0, min_reg=0, sec_reg=0;
  
  //write sec
  tmp1=sec/10;
  tmp2=sec%10;
  if(sec<=59){
 e5a:	4c 33       	cpi	r20, 0x3C	; 60
 e5c:	18 f0       	brcs	.+6      	; 0xe64 <RTC_Set_Time+0x16>
 e5e:	11 e0       	ldi	r17, 0x01	; 1
 e60:	ee 24       	eor	r14, r14
 e62:	11 c0       	rjmp	.+34     	; 0xe86 <RTC_Set_Time+0x38>
    sec_reg=(tmp1<<4)|tmp2;
 e64:	84 2f       	mov	r24, r20
 e66:	6a e0       	ldi	r22, 0x0A	; 10
 e68:	0e 94 bb 07 	call	0xf76	; 0xf76 <__udivmodqi4>
 e6c:	28 2f       	mov	r18, r24
 e6e:	30 e0       	ldi	r19, 0x00	; 0
 e70:	f4 e0       	ldi	r31, 0x04	; 4
 e72:	22 0f       	add	r18, r18
 e74:	33 1f       	adc	r19, r19
 e76:	fa 95       	dec	r31
 e78:	e1 f7       	brne	.-8      	; 0xe72 <RTC_Set_Time+0x24>
 e7a:	84 2f       	mov	r24, r20
 e7c:	0e 94 bb 07 	call	0xf76	; 0xf76 <__udivmodqi4>
 e80:	e9 2e       	mov	r14, r25
 e82:	e2 2a       	or	r14, r18
 e84:	10 e0       	ldi	r17, 0x00	; 0
  }
  
  //write min
  tmp1=min/10;
  tmp2=min%10;
  if(min<=59){
 e86:	5c 33       	cpi	r21, 0x3C	; 60
 e88:	18 f0       	brcs	.+6      	; 0xe90 <RTC_Set_Time+0x42>
 e8a:	12 e0       	ldi	r17, 0x02	; 2
 e8c:	ff 24       	eor	r15, r15
 e8e:	10 c0       	rjmp	.+32     	; 0xeb0 <RTC_Set_Time+0x62>
    min_reg=(tmp1<<4)|tmp2;
 e90:	85 2f       	mov	r24, r21
 e92:	6a e0       	ldi	r22, 0x0A	; 10
 e94:	0e 94 bb 07 	call	0xf76	; 0xf76 <__udivmodqi4>
 e98:	28 2f       	mov	r18, r24
 e9a:	30 e0       	ldi	r19, 0x00	; 0
 e9c:	e4 e0       	ldi	r30, 0x04	; 4
 e9e:	22 0f       	add	r18, r18
 ea0:	33 1f       	adc	r19, r19
 ea2:	ea 95       	dec	r30
 ea4:	e1 f7       	brne	.-8      	; 0xe9e <RTC_Set_Time+0x50>
 ea6:	85 2f       	mov	r24, r21
 ea8:	0e 94 bb 07 	call	0xf76	; 0xf76 <__udivmodqi4>
 eac:	f9 2e       	mov	r15, r25
 eae:	f2 2a       	or	r15, r18


//edit below functions for compatibility with other devices//

uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
 eb0:	82 e0       	ldi	r24, 0x02	; 2
 eb2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <I2C_Read_Register>
    error=0x02;
  }
  
  //write hour
  tmp0=RTC_Read(0x02);
  tmp0&=0x60;
 eb6:	38 2f       	mov	r19, r24
 eb8:	30 76       	andi	r19, 0x60	; 96
  tmp1=hr/10;
 eba:	80 2f       	mov	r24, r16
 ebc:	6a e0       	ldi	r22, 0x0A	; 10
 ebe:	0e 94 bb 07 	call	0xf76	; 0xf76 <__udivmodqi4>
 ec2:	28 2f       	mov	r18, r24
  tmp2=hr%10;
 ec4:	80 2f       	mov	r24, r16
 ec6:	0e 94 bb 07 	call	0xf76	; 0xf76 <__udivmodqi4>
  if(tmp0 & (1<<6)){          //12H
 eca:	36 ff       	sbrs	r19, 6
 ecc:	0a c0       	rjmp	.+20     	; 0xee2 <RTC_Set_Time+0x94>
    if(hr<=12){
 ece:	0d 30       	cpi	r16, 0x0D	; 13
 ed0:	10 f0       	brcs	.+4      	; 0xed6 <RTC_Set_Time+0x88>
 ed2:	13 e0       	ldi	r17, 0x03	; 3
 ed4:	17 c0       	rjmp	.+46     	; 0xf04 <RTC_Set_Time+0xb6>
	  hr_reg=tmp0|(tmp1<<4)|tmp2;
 ed6:	62 2f       	mov	r22, r18
 ed8:	62 95       	swap	r22
 eda:	60 7f       	andi	r22, 0xF0	; 240
 edc:	69 2b       	or	r22, r25
 ede:	63 2b       	or	r22, r19
 ee0:	04 c0       	rjmp	.+8      	; 0xeea <RTC_Set_Time+0x9c>
	}else{
	  error=0x03;
	}
  }else{                      //24H 
    tmp0&=0x40;
	hr_reg=(tmp1<<4)|tmp2;
 ee2:	62 2f       	mov	r22, r18
 ee4:	62 95       	swap	r22
 ee6:	60 7f       	andi	r22, 0xF0	; 240
 ee8:	69 2b       	or	r22, r25
  }
  
  
  if(error==0){
 eea:	11 23       	and	r17, r17
 eec:	59 f4       	brne	.+22     	; 0xf04 <RTC_Set_Time+0xb6>
uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
}

void RTC_Write(uint8_t addr, uint8_t data){
  I2C_Write_Register(addr,data);
 eee:	82 e0       	ldi	r24, 0x02	; 2
 ef0:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
	RTC_Write(0x01,min_reg);
	RTC_Write(0x00,sec_reg);
  }
  
  #ifdef ENABLE_ERROR_HANDLER
  RTC_Error=error;
 ef4:	81 e0       	ldi	r24, 0x01	; 1
 ef6:	6f 2d       	mov	r22, r15
 ef8:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
 efc:	80 e0       	ldi	r24, 0x00	; 0
 efe:	6e 2d       	mov	r22, r14
 f00:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
 f04:	10 93 28 01 	sts	0x0128, r17
  #endif
}
 f08:	1f 91       	pop	r17
 f0a:	0f 91       	pop	r16
 f0c:	ff 90       	pop	r15
 f0e:	ef 90       	pop	r14
 f10:	08 95       	ret

00000f12 <RTC_Set_12H_PM>:
uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
}

void RTC_Write(uint8_t addr, uint8_t data){
  I2C_Write_Register(addr,data);
 f12:	82 e0       	ldi	r24, 0x02	; 2
 f14:	60 e6       	ldi	r22, 0x60	; 96
 f16:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
  RTC_Write(0x02,0b01000000);
}

void RTC_Set_12H_PM(void){
  RTC_Write(0x02,0b01100000);
}
 f1a:	08 95       	ret

00000f1c <RTC_Set_12H_AM>:
uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
}

void RTC_Write(uint8_t addr, uint8_t data){
  I2C_Write_Register(addr,data);
 f1c:	82 e0       	ldi	r24, 0x02	; 2
 f1e:	60 e4       	ldi	r22, 0x40	; 64
 f20:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
  RTC_Write(0x02,0b00000000);
}

void RTC_Set_12H_AM(void){
  RTC_Write(0x02,0b01000000);
}
 f24:	08 95       	ret

00000f26 <RTC_Set_24H>:
uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
}

void RTC_Write(uint8_t addr, uint8_t data){
  I2C_Write_Register(addr,data);
 f26:	82 e0       	ldi	r24, 0x02	; 2
 f28:	60 e0       	ldi	r22, 0x00	; 0
 f2a:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
  I2C_Init();  
}

void RTC_Set_24H(void){
  RTC_Write(0x02,0b00000000);
}
 f2e:	08 95       	ret

00000f30 <RTC_Set_Time_With_Format>:
  #ifdef ENABLE_ERROR_HANDLER
  RTC_Error=error;
  #endif
}

void RTC_Set_Time_With_Format(uint8_t hr, uint8_t min, uint8_t sec, uint8_t hr_con, uint8_t AmPm){
 f30:	ef 92       	push	r14
 f32:	ff 92       	push	r15
 f34:	0f 93       	push	r16
 f36:	1f 93       	push	r17
 f38:	18 2f       	mov	r17, r24
 f3a:	f6 2e       	mov	r15, r22
 f3c:	e4 2e       	mov	r14, r20
  if(hr_con==0){
 f3e:	22 23       	and	r18, r18
 f40:	19 f4       	brne	.+6      	; 0xf48 <RTC_Set_Time_With_Format+0x18>
uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
}

void RTC_Write(uint8_t addr, uint8_t data){
  I2C_Write_Register(addr,data);
 f42:	82 e0       	ldi	r24, 0x02	; 2
 f44:	60 e0       	ldi	r22, 0x00	; 0
 f46:	0b c0       	rjmp	.+22     	; 0xf5e <RTC_Set_Time_With_Format+0x2e>
}

void RTC_Set_Time_With_Format(uint8_t hr, uint8_t min, uint8_t sec, uint8_t hr_con, uint8_t AmPm){
  if(hr_con==0){
    RTC_Set_24H();
  }else if(hr_con==1){
 f48:	21 30       	cpi	r18, 0x01	; 1
 f4a:	59 f4       	brne	.+22     	; 0xf62 <RTC_Set_Time_With_Format+0x32>
    if(AmPm==0){
 f4c:	00 23       	and	r16, r16
 f4e:	19 f4       	brne	.+6      	; 0xf56 <RTC_Set_Time_With_Format+0x26>
uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
}

void RTC_Write(uint8_t addr, uint8_t data){
  I2C_Write_Register(addr,data);
 f50:	82 e0       	ldi	r24, 0x02	; 2
 f52:	60 e4       	ldi	r22, 0x40	; 64
 f54:	04 c0       	rjmp	.+8      	; 0xf5e <RTC_Set_Time_With_Format+0x2e>
  if(hr_con==0){
    RTC_Set_24H();
  }else if(hr_con==1){
    if(AmPm==0){
	  RTC_Set_12H_AM();
	}else if(AmPm==1){
 f56:	01 30       	cpi	r16, 0x01	; 1
 f58:	21 f4       	brne	.+8      	; 0xf62 <RTC_Set_Time_With_Format+0x32>
uint8_t RTC_Read(uint8_t addr){
  return I2C_Read_Register(addr);
}

void RTC_Write(uint8_t addr, uint8_t data){
  I2C_Write_Register(addr,data);
 f5a:	82 e0       	ldi	r24, 0x02	; 2
 f5c:	60 e6       	ldi	r22, 0x60	; 96
 f5e:	0e 94 2d 02 	call	0x45a	; 0x45a <I2C_Write_Register>
	  RTC_Set_12H_AM();
	}else if(AmPm==1){
	  RTC_Set_12H_PM();
	}
  }
  RTC_Set_Time( hr, min, sec);
 f62:	81 2f       	mov	r24, r17
 f64:	6f 2d       	mov	r22, r15
 f66:	4e 2d       	mov	r20, r14
 f68:	0e 94 27 07 	call	0xe4e	; 0xe4e <RTC_Set_Time>
}
 f6c:	1f 91       	pop	r17
 f6e:	0f 91       	pop	r16
 f70:	ff 90       	pop	r15
 f72:	ef 90       	pop	r14
 f74:	08 95       	ret

00000f76 <__udivmodqi4>:
 f76:	99 1b       	sub	r25, r25
 f78:	79 e0       	ldi	r23, 0x09	; 9
 f7a:	04 c0       	rjmp	.+8      	; 0xf84 <__udivmodqi4_ep>

00000f7c <__udivmodqi4_loop>:
 f7c:	99 1f       	adc	r25, r25
 f7e:	96 17       	cp	r25, r22
 f80:	08 f0       	brcs	.+2      	; 0xf84 <__udivmodqi4_ep>
 f82:	96 1b       	sub	r25, r22

00000f84 <__udivmodqi4_ep>:
 f84:	88 1f       	adc	r24, r24
 f86:	7a 95       	dec	r23
 f88:	c9 f7       	brne	.-14     	; 0xf7c <__udivmodqi4_loop>
 f8a:	80 95       	com	r24
 f8c:	08 95       	ret

00000f8e <__udivmodsi4>:
 f8e:	a1 e2       	ldi	r26, 0x21	; 33
 f90:	1a 2e       	mov	r1, r26
 f92:	aa 1b       	sub	r26, r26
 f94:	bb 1b       	sub	r27, r27
 f96:	fd 01       	movw	r30, r26
 f98:	0d c0       	rjmp	.+26     	; 0xfb4 <__udivmodsi4_ep>

00000f9a <__udivmodsi4_loop>:
 f9a:	aa 1f       	adc	r26, r26
 f9c:	bb 1f       	adc	r27, r27
 f9e:	ee 1f       	adc	r30, r30
 fa0:	ff 1f       	adc	r31, r31
 fa2:	a2 17       	cp	r26, r18
 fa4:	b3 07       	cpc	r27, r19
 fa6:	e4 07       	cpc	r30, r20
 fa8:	f5 07       	cpc	r31, r21
 faa:	20 f0       	brcs	.+8      	; 0xfb4 <__udivmodsi4_ep>
 fac:	a2 1b       	sub	r26, r18
 fae:	b3 0b       	sbc	r27, r19
 fb0:	e4 0b       	sbc	r30, r20
 fb2:	f5 0b       	sbc	r31, r21

00000fb4 <__udivmodsi4_ep>:
 fb4:	66 1f       	adc	r22, r22
 fb6:	77 1f       	adc	r23, r23
 fb8:	88 1f       	adc	r24, r24
 fba:	99 1f       	adc	r25, r25
 fbc:	1a 94       	dec	r1
 fbe:	69 f7       	brne	.-38     	; 0xf9a <__udivmodsi4_loop>
 fc0:	60 95       	com	r22
 fc2:	70 95       	com	r23
 fc4:	80 95       	com	r24
 fc6:	90 95       	com	r25
 fc8:	9b 01       	movw	r18, r22
 fca:	ac 01       	movw	r20, r24
 fcc:	bd 01       	movw	r22, r26
 fce:	cf 01       	movw	r24, r30
 fd0:	08 95       	ret

00000fd2 <_exit>:
 fd2:	f8 94       	cli

00000fd4 <__stop_program>:
 fd4:	ff cf       	rjmp	.-2      	; 0xfd4 <__stop_program>
